name: CI

on:
  push:
    branches: [main, dev]
  pull_request:
    branches: [main]

jobs:
  build-python-sdk:
    name: Build Python SDK
    strategy:
      matrix:
        include:
          - os: ubuntu-latest
            platform: linux
          - os: macos-13  # Intel Mac
            platform: macos-x86_64
          - os: macos-latest  # ARM Mac
            platform: macos-arm64

    runs-on: ${{ matrix.os }}

    env:
      TWINE_USERNAME: __token__
      TWINE_PASSWORD: ${{ secrets.PYPI_API_TOKEN }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.24'

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Install uv
        run: |
          curl -LsSf https://astral.sh/uv/install.sh | sh
          echo "$HOME/.cargo/bin" >> $GITHUB_PATH

      - name: Build Python SDK with C bindings
        run: ./scripts/build-python.sh

      - name: Test Python SDK imports and library loading
        run: |
          cd python
          uv run python3 tests/test_import.py

      - name: Compute dev version & patch pyproject.toml
        id: version
        shell: python
        run: |
          import os, re, subprocess, datetime, pathlib, sys
          p = pathlib.Path("python/pyproject.toml")
          text = p.read_text(encoding="utf-8")

          # Grab current version from pyproject (PEP 621)
          m = re.search(r'(?m)^\s*version\s*=\s*"([^"]+)"\s*$', text)
          if not m:
            print("ERROR: Could not find version = \"...\" in pyproject.toml", file=sys.stderr)
            sys.exit(1)
          current = m.group(1)

          # Parse semantic version
          base = current.split("+")[0]
          base = re.sub(r'(a|b|rc|dev).*$', "", base)
          parts = base.split(".")
          if len(parts) != 3:
            print(f"ERROR: Invalid semantic version format: {base}", file=sys.stderr)
            sys.exit(1)

          major, minor, patch = map(int, parts)

          # Auto-bump patch version for dev releases
          patch += 1
          bumped_version = f"{major}.{minor}.{patch}"

          # Build a unique dev version: <bumped>.devYYYYMMDDHHMMSS (PEP 440 compliant)
          now = datetime.datetime.utcnow().strftime("%Y%m%d%H%M%S")
          dev_version = f"{bumped_version}.dev{now}"

          patched = re.sub(r'(?m)^(\s*version\s*=\s*")([^"]+)(")',
                           r'\g<1>' + dev_version + r'\3', text)
          p.write_text(patched, encoding="utf-8")
          print(f"Patched version: {current} -> {dev_version}")

          # Write to GITHUB_OUTPUT and GITHUB_ENV
          with open(os.environ["GITHUB_OUTPUT"], "a") as f:
            f.write(f"dev_version={dev_version}\n")
            f.write(f"bumped_version={bumped_version}\n")
            f.write(f"current_version={current}\n")
          with open(os.environ["GITHUB_ENV"], "a") as f:
            f.write(f"DEV_VERSION={dev_version}\n")
            f.write(f"BUMPED_VERSION={bumped_version}\n")

          # Write to step summary
          with open(os.environ["GITHUB_STEP_SUMMARY"], "a") as f:
            f.write(f"## üì¶ Dev Package Published\n")
            f.write(f"- **Current Version:** `{current}`\n")
            f.write(f"- **Bumped Version:** `{bumped_version}` (patch + 1)\n")
            f.write(f"- **Dev Version:** `{dev_version}`\n")
            f.write(f"- **Timestamp:** {now}\n")
            f.write(f"- **Repository:** PyPI\n")
            f.write(f"\n### Install Command\n")
            f.write(f"```bash\n")
            f.write(f"pip install plato-sdk=={dev_version}\n")
            f.write(f"```\n")

      - name: Install build tooling
        run: |
          python -m pip install --upgrade pip
          pip install build twine

      - name: Build wheel
        working-directory: python
        run: python -m build --wheel

      - name: Build sdist (Linux only)
        if: matrix.platform == 'linux'
        working-directory: python
        run: python -m build --sdist

      - name: Rename wheel to platform-specific name
        working-directory: python
        shell: python
        run: |
          import os, glob, sys

          # Find the wheel file
          wheels = glob.glob("dist/*.whl")
          if not wheels:
            print("ERROR: No wheel file found", file=sys.stderr)
            sys.exit(1)

          wheel = wheels[0]
          print(f"Found wheel: {wheel}")

          # Determine platform tag based on runner OS
          os_name = "${{ matrix.platform }}"

          if os_name == "linux":
            plat_tag = "manylinux_2_17_x86_64.manylinux2014_x86_64"
          elif os_name == "macos-x86_64":
            plat_tag = "macosx_10_13_x86_64"
          elif os_name == "macos-arm64":
            plat_tag = "macosx_11_0_arm64"
          else:
            print(f"ERROR: Unknown platform: {os_name}", file=sys.stderr)
            sys.exit(1)

          # Parse wheel filename
          basename = os.path.basename(wheel)
          parts = basename.rsplit("-", 3)
          name_version = parts[0]

          # Reconstruct with proper platform tag
          new_name = f"{name_version}-py3-none-{plat_tag}.whl"
          new_path = os.path.join("dist", new_name)

          os.rename(wheel, new_path)
          print(f"Renamed to: {new_name}")

      - name: Debug token
        run: |
          if [ -z "$TWINE_PASSWORD" ]; then
            echo "ERROR: TWINE_PASSWORD is empty!"
          else
            echo "Token length: ${#TWINE_PASSWORD}"
            echo "Token starts with: ${TWINE_PASSWORD:0:5}..."
          fi

      - name: Publish to PyPI
        working-directory: python
        run: |
          python -m twine upload --skip-existing --verbose dist/*.whl
          if [ "${{ matrix.platform }}" == "linux" ]; then
            python -m twine upload --skip-existing --verbose dist/*.tar.gz
          fi

      - name: Summary
        run: |
          echo "‚úÖ Published to PyPI"
          echo ""
          echo "üì¶ Package: plato-sdk"
          echo "üè∑Ô∏è  Version: ${{ env.DEV_VERSION }}"
          echo "üìç URL: https://pypi.org/project/plato-sdk/${{ env.DEV_VERSION }}/"
          echo ""
          echo "Install with:"
          echo "  pip install plato-sdk==${{ env.DEV_VERSION }}"

