name: CI

on:
  push:
    branches: [main, dev]
  pull_request:
    branches: [main]

jobs:
  compute-version:
    runs-on: ubuntu-latest
    outputs:
      dev_version: ${{ steps.version.outputs.dev_version }}
      bumped_version: ${{ steps.version.outputs.bumped_version }}
      current_version: ${{ steps.version.outputs.current_version }}

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Compute dev version
        id: version
        shell: python
        run: |
          import os, re, datetime, pathlib, sys

          # Read version from root VERSION file
          version_file = pathlib.Path("VERSION")
          if not version_file.exists():
            print("ERROR: VERSION file not found", file=sys.stderr)
            sys.exit(1)
          current = version_file.read_text(encoding="utf-8").strip()

          # Parse semantic version
          base = current.split("+")[0]
          base = re.sub(r'(a|b|rc|dev).*$', "", base)
          parts = base.split(".")
          if len(parts) != 3:
            print(f"ERROR: Invalid semantic version format: {base}", file=sys.stderr)
            sys.exit(1)

          major, minor, patch = map(int, parts)

          # Auto-bump patch version for dev releases
          patch += 1
          bumped_version = f"{major}.{minor}.{patch}"

          # Build a unique dev version: <bumped>.devYYYYMMDDHHMMSS (PEP 440 compliant)
          now = datetime.datetime.utcnow().strftime("%Y%m%d%H%M%S")
          dev_version = f"{bumped_version}.dev{now}"

          print(f"Version: {current} -> {dev_version}")

          # Write to GITHUB_OUTPUT
          with open(os.environ["GITHUB_OUTPUT"], "a") as f:
            f.write(f"dev_version={dev_version}\n")
            f.write(f"bumped_version={bumped_version}\n")
            f.write(f"current_version={current}\n")

          # Write to step summary
          with open(os.environ["GITHUB_STEP_SUMMARY"], "a") as f:
            f.write(f"## üì¶ Dev Package Version\n")
            f.write(f"- **Current Version:** `{current}`\n")
            f.write(f"- **Bumped Version:** `{bumped_version}` (patch + 1)\n")
            f.write(f"- **Dev Version:** `{dev_version}`\n")
            f.write(f"- **Timestamp:** {now}\n")
            f.write(f"\n### Install Command\n")
            f.write(f"```bash\n")
            f.write(f"pip install plato-sdk=={dev_version}\n")
            f.write(f"```\n")

  build-python-sdk:
    needs: compute-version
    name: Build Python SDK
    strategy:
      matrix:
        include:
          - os: ubuntu-latest
            platform: linux
            python-version: "3.10"
          - os: ubuntu-latest
            platform: linux
            python-version: "3.11"
          - os: ubuntu-latest
            platform: linux
            python-version: "3.12"
          - os: macos-13  # Intel Mac
            platform: macos-x86_64
            python-version: "3.10"
          - os: macos-13
            platform: macos-x86_64
            python-version: "3.11"
          - os: macos-13
            platform: macos-x86_64
            python-version: "3.12"
          - os: macos-latest  # ARM Mac
            platform: macos-arm64
            python-version: "3.10"
          - os: macos-latest
            platform: macos-arm64
            python-version: "3.11"
          - os: macos-latest
            platform: macos-arm64
            python-version: "3.12"

    runs-on: ${{ matrix.os }}

    env:
      TWINE_USERNAME: __token__
      TWINE_PASSWORD: ${{ secrets.PYPI_API_TOKEN }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.24'

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}

      - name: Install uv
        run: |
          curl -LsSf https://astral.sh/uv/install.sh | sh
          echo "$HOME/.local/bin" >> $GITHUB_PATH

      - name: Install proxytunnel
        run: |
          if [[ "$RUNNER_OS" == "macOS" ]]; then
            brew install proxytunnel
          elif [[ "$RUNNER_OS" == "Linux" ]]; then
            sudo apt-get update && sudo apt-get install -y proxytunnel
          fi

      - name: Build Python SDK with C bindings and CLI
        run: ./scripts/build-python.sh

      - name: Test Python SDK imports and library loading
        run: |
          cd python
          uv run python3 tests/test_import.py

      - name: Patch version in VERSION file
        working-directory: .
        shell: python
        run: |
          import pathlib
          dev_version = "${{ needs.compute-version.outputs.dev_version }}"
          p = pathlib.Path("VERSION")
          p.write_text(dev_version + "\n", encoding="utf-8")
          print(f"Patched VERSION to: {dev_version}")

      - name: Install build tooling
        run: |
          python -m pip install --upgrade pip
          pip install build twine

      - name: Build wheel
        working-directory: python
        run: python -m build --wheel

      - name: Build sdist (Linux only)
        if: matrix.platform == 'linux'
        working-directory: python
        run: python -m build --sdist

      - name: Fix Linux wheel tag (if needed)
        if: matrix.platform == 'linux'
        working-directory: python
        shell: python
        run: |
          import os, glob, shutil

          wheels = glob.glob("dist/*.whl")
          if not wheels:
            print("ERROR: No wheel file found")
            exit(1)

          # Fix all wheels in the dist directory
          for wheel in wheels:
            print(f"Checking wheel: {os.path.basename(wheel)}")

            # If it has linux_x86_64, rename to manylinux
            if 'linux_x86_64' in wheel:
              new_wheel = wheel.replace('linux_x86_64', 'manylinux_2_17_x86_64.manylinux2014_x86_64')
              shutil.move(wheel, new_wheel)
              print(f"‚úÖ Fixed wheel tag: {os.path.basename(new_wheel)}")
            else:
              print(f"‚úÖ Wheel already has correct tag: {os.path.basename(wheel)}")

      - name: Verify wheel platform tag
        working-directory: python
        shell: python
        run: |
          import os, glob, sys

          wheels = glob.glob("dist/*.whl")
          if not wheels:
            print("ERROR: No wheel file found", file=sys.stderr)
            sys.exit(1)

          wheel = wheels[0]
          print(f"‚úÖ Built wheel: {os.path.basename(wheel)}")

          if 'none-any' in wheel:
            print("ERROR: Wheel should be platform-specific, not 'none-any'", file=sys.stderr)
            sys.exit(1)

          print(f"‚úÖ Wheel is platform-specific")

      - name: Debug token
        run: |
          if [ -z "$TWINE_PASSWORD" ]; then
            echo "ERROR: TWINE_PASSWORD is empty!"
          else
            echo "Token length: ${#TWINE_PASSWORD}"
            echo "Token starts with: ${TWINE_PASSWORD:0:5}..."
          fi

      - name: Publish to PyPI
        working-directory: python
        run: |
          python -m twine upload --skip-existing --verbose dist/*.whl
          if [ "${{ matrix.platform }}" == "linux" ]; then
            python -m twine upload --skip-existing --verbose dist/*.tar.gz
          fi

      - name: Summary
        run: |
          echo "‚úÖ Published to PyPI"
          echo ""
          echo "üì¶ Package: plato-sdk"
          echo "üè∑Ô∏è  Version: ${{ needs.compute-version.outputs.dev_version }}"
          echo "üìç URL: https://pypi.org/project/plato-sdk/${{ needs.compute-version.outputs.dev_version }}/"
          echo ""
          echo "Install with:"
          echo "  pip install plato-sdk==${{ needs.compute-version.outputs.dev_version }}"

