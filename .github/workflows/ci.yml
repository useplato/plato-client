name: CI

on:
  push:
    branches: [main, dev]
  pull_request:
    branches: [main]

jobs:
  test-sdk:
    name: Test Go SDK
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.23'

      - name: Download dependencies
        run: |
          cd sdk
          go mod download

      - name: Build SDK
        run: |
          cd sdk
          go build ./...

      - name: Run SDK tests with race detector
        run: |
          cd sdk
          go test -race -coverprofile=coverage.out ./...

      - name: Upload coverage
        uses: codecov/codecov-action@v3
        with:
          files: ./sdk/coverage.out
          flags: sdk

  build-cli:
    name: Build CLI
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.23'

      - name: Build CLI
        run: ./scripts/build-cli.sh

      - name: Test CLI binary
        run: ./cli/plato --help || true

  build-c-bindings:
    name: Build C Bindings
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.23'

      - name: Build C bindings
        run: |
          cd sdk/bindings/c
          if [ ! -f "go.mod" ]; then
            go mod init plato-bindings
            go mod edit -replace plato-sdk=../../
            go get plato-sdk
            go mod tidy
          fi
          if [ "$RUNNER_OS" == "Linux" ]; then
            go build -buildmode=c-shared -o libplato.so sandbox.go
          else
            go build -buildmode=c-shared -o libplato.dylib sandbox.go
          fi

      - name: Verify shared library
        run: |
          if [ "$RUNNER_OS" == "Linux" ]; then
            ls -lh sdk/bindings/c/libplato.so
            file sdk/bindings/c/libplato.so
          else
            ls -lh sdk/bindings/c/libplato.dylib
            file sdk/bindings/c/libplato.dylib
          fi

  build-python-sdk:
    name: Build Python SDK
    runs-on: ubuntu-latest

    permissions:
      contents: read
      id-token: write # Required for OIDC trusted publishing

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.23'

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Install uv
        run: |
          curl -LsSf https://astral.sh/uv/install.sh | sh
          echo "$HOME/.cargo/bin" >> $GITHUB_PATH

      - name: Build Python SDK with C bindings
        run: ./scripts/build-python.sh

      - name: Test Python SDK imports and library loading
        run: |
          cd python
          uv run python3 tests/test_import.py

      - name: Compute dev version & patch pyproject.toml
        id: version
        shell: python
        run: |
          import os, re, subprocess, datetime, pathlib, sys
          p = pathlib.Path("python/pyproject.toml")
          text = p.read_text(encoding="utf-8")

          # Grab current version from pyproject (PEP 621)
          m = re.search(r'(?m)^\s*version\s*=\s*"([^"]+)"\s*$', text)
          if not m:
            print("ERROR: Could not find version = \"...\" in pyproject.toml", file=sys.stderr)
            sys.exit(1)
          current = m.group(1)

          # Parse semantic version
          base = current.split("+")[0]
          base = re.sub(r'(a|b|rc|dev).*$', "", base)
          parts = base.split(".")
          if len(parts) != 3:
            print(f"ERROR: Invalid semantic version format: {base}", file=sys.stderr)
            sys.exit(1)

          major, minor, patch = map(int, parts)

          # Auto-bump patch version for dev releases
          patch += 1
          bumped_version = f"{major}.{minor}.{patch}"

          # Build a unique dev version: <bumped>.devYYYYMMDDHHMMSS (PEP 440 compliant)
          now = datetime.datetime.utcnow().strftime("%Y%m%d%H%M%S")
          dev_version = f"{bumped_version}.dev{now}"

          patched = re.sub(r'(?m)^(\s*version\s*=\s*")([^"]+)(")',
                           r'\g<1>' + dev_version + r'\3', text)
          p.write_text(patched, encoding="utf-8")
          print(f"Patched version: {current} -> {dev_version}")

          # Write to GITHUB_OUTPUT and GITHUB_ENV
          with open(os.environ["GITHUB_OUTPUT"], "a") as f:
            f.write(f"dev_version={dev_version}\n")
            f.write(f"bumped_version={bumped_version}\n")
            f.write(f"current_version={current}\n")
          with open(os.environ["GITHUB_ENV"], "a") as f:
            f.write(f"DEV_VERSION={dev_version}\n")
            f.write(f"BUMPED_VERSION={bumped_version}\n")

          # Write to step summary
          with open(os.environ["GITHUB_STEP_SUMMARY"], "a") as f:
            f.write(f"## üì¶ Dev Package Published\n")
            f.write(f"- **Current Version:** `{current}`\n")
            f.write(f"- **Bumped Version:** `{bumped_version}` (patch + 1)\n")
            f.write(f"- **Dev Version:** `{dev_version}`\n")
            f.write(f"- **Timestamp:** {now}\n")
            f.write(f"- **Repository:** TestPyPI\n")
            f.write(f"\n### Install Command\n")
            f.write(f"```bash\n")
            f.write(f"pip install --index-url https://test.pypi.org/simple/ --extra-index-url https://pypi.org/simple/ plato-sdk=={dev_version}\n")
            f.write(f"```\n")

      - name: Install build tooling
        run: |
          python -m pip install --upgrade pip
          pip install build

      - name: Build sdist & wheel
        working-directory: python
        run: python -m build

      - name: Publish to TestPyPI via OIDC
        uses: pypa/gh-action-pypi-publish@release/v1
        with:
          repository-url: https://test.pypi.org/legacy/
          packages-dir: python/dist/
          skip-existing: true
          verbose: true

      - name: Summary
        run: |
          echo "‚úÖ Published to TestPyPI"
          echo ""
          echo "üì¶ Package: plato-sdk"
          echo "üè∑Ô∏è  Version: ${{ env.DEV_VERSION }}"
          echo "üìç URL: https://test.pypi.org/project/plato-sdk/${{ env.DEV_VERSION }}/"
          echo ""
          echo "Install with:"
          echo "  pip install --index-url https://test.pypi.org/simple/ --extra-index-url https://pypi.org/simple/ plato-sdk==${{ env.DEV_VERSION }}"

  lint:
    name: Lint
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.23'

      - name: Run golangci-lint on SDK
        uses: golangci/golangci-lint-action@v6
        with:
          version: v1.62
          working-directory: sdk
          args: --timeout=5m

      - name: Run golangci-lint on CLI
        uses: golangci/golangci-lint-action@v6
        with:
          version: v1.62
          working-directory: cli
          args: --timeout=5m

