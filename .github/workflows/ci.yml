name: CI

on:
  push:
    branches: [main, dev]
  pull_request:
    branches: [main]

jobs:
  test-sdk:
    name: Test Go SDK
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.24'

      - name: Download dependencies
        run: |
          cd sdk
          go mod download

      - name: Build SDK
        run: |
          cd sdk
          go build ./...

      - name: Run SDK tests with race detector
        run: |
          cd sdk
          go test -race -coverprofile=coverage.out ./...

      - name: Upload coverage
        uses: codecov/codecov-action@v3
        with:
          files: ./sdk/coverage.out
          flags: sdk

  build-cli:
    name: Build CLI
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.24'

      - name: Build CLI
        run: ./scripts/build-cli.sh

      - name: Test CLI binary
        run: ./cli/plato --help || true

  build-c-bindings:
    name: Build C Bindings
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.24'

      - name: Build C bindings
        run: |
          cd sdk/bindings/c
          if [ ! -f "go.mod" ]; then
            go mod init plato-bindings
            go mod edit -replace plato-sdk=../../
            go get plato-sdk
            go mod tidy
          fi
          if [ "$RUNNER_OS" == "Linux" ]; then
            go build -buildmode=c-shared -o libplato.so sandbox.go
          else
            go build -buildmode=c-shared -o libplato.dylib sandbox.go
          fi

      - name: Verify shared library
        run: |
          if [ "$RUNNER_OS" == "Linux" ]; then
            ls -lh sdk/bindings/c/libplato.so
            file sdk/bindings/c/libplato.so
          else
            ls -lh sdk/bindings/c/libplato.dylib
            file sdk/bindings/c/libplato.dylib
          fi

  build-python-sdk:
    name: Build Python SDK
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.24'

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Install uv
        run: |
          curl -LsSf https://astral.sh/uv/install.sh | sh
          echo "$HOME/.cargo/bin" >> $GITHUB_PATH

      - name: Build Python SDK with C bindings
        run: ./scripts/build-python.sh

      - name: Test Python SDK imports and library loading
        run: |
          cd python
          uv run python3 tests/test_import.py

      - name: Verify build artifacts
        run: |
          ls -lh python/src/plato/libplato.*
          ls -lh python/dist/
          echo "âœ… Python SDK built successfully"
          echo ""
          echo "## ðŸ“¦ Python SDK Build Output" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Built Packages:" >> $GITHUB_STEP_SUMMARY
          echo '```' >> $GITHUB_STEP_SUMMARY
          ls -lh python/dist/ >> $GITHUB_STEP_SUMMARY
          echo '```' >> $GITHUB_STEP_SUMMARY

