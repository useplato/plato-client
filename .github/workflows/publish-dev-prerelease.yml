name: Publish Dev Pre-release (TestPyPI)

on:
  push:
    branches: [ main ]

jobs:
  publish-dev:
    runs-on: ubuntu-latest

    permissions:
      contents: read
      id-token: write  # Required for OIDC trusted publishing

    env:
      # Change to your next intended minor/major base if you prefer (e.g., 2.0.0).
      # If omitted, we auto-read the current version in pyproject and append .dev...
      BASE_VERSION: ""   # leave empty to auto-detect from pyproject

    defaults:
      run:
        working-directory: python

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.12"

      - name: Install build tooling
        run: |
          python -m pip install --upgrade pip
          pip install build

      - name: Compute dev version & patch pyproject.toml
        working-directory: .
        shell: python
        run: |
          import os, re, subprocess, datetime, pathlib, sys
          p = pathlib.Path("python/pyproject.toml")
          text = p.read_text(encoding="utf-8")

          # Grab current version from pyproject (PEP 621)
          m = re.search(r'(?m)^\s*version\s*=\s*"([^"]+)"\s*$', text)
          if not m:
            print("ERROR: Could not find version = \"...\" in pyproject.toml", file=sys.stderr)
            sys.exit(1)
          current = m.group(1)

          # Decide base version
          base = os.environ.get("BASE_VERSION") or current
          # Ensure base has no pre/local already
          base = base.split("+")[0]
          base = re.sub(r'(a|b|rc|dev).*$', "", base)

          # Build a unique dev version: <base>.devYYYYMMDDHHMMSS+g<sha>
          now = datetime.datetime.utcnow().strftime("%Y%m%d%H%M%S")
          sha = subprocess.check_output(["git","rev-parse","--short","HEAD"], text=True).strip()
          dev_version = f"{base}.dev{now}+g{sha}"

          patched = re.sub(r'(?m)^(\s*version\s*=\s*")([^"]+)(")',
                           r'\g<1>' + dev_version + r'\3', text)
          p.write_text(patched, encoding="utf-8")
          print(f"Patched version: {dev_version}")

      - name: Build sdist & wheel
        run: python -m build

      - name: Publish to TestPyPI via OIDC
        uses: pypa/gh-action-pypi-publish@release/v1
        with:
          repository-url: https://test.pypi.org/legacy/
          packages-dir: python/dist/
          skip-existing: true

      # Optional: smoke test that it installs from TestPyPI
      - name: Smoke test - verify installation from TestPyPI
        run: |
          python -m venv .venv-test
          . .venv-test/bin/activate
          # Extract package name from metadata (best effort)
          PKG=$(python - <<'PY'
          import json, pathlib, sys
          # try to read project.name from pyproject
          t = pathlib.Path("pyproject.toml").read_text(encoding="utf-8")
          import re
          m = re.search(r'(?ms)^\s*\[project\]\s.*?^\s*name\s*=\s*"([^"]+)"', t)
          print(m.group(1) if m else "")
          PY
          )
          if [ -z "$PKG" ]; then
            echo "WARN: Could not detect project.name; skipping smoke install."
            exit 0
          fi
          python -m pip install --upgrade pip
          python -m pip install --index-url https://test.pypi.org/simple/ --no-deps "$PKG"
          python -c "import importlib; importlib.import_module('$PKG'.replace('-','_')); print('Imported OK')"

