name: Build and Release

on:
  push:
    branches:
      - main
    paths:
      - 'sdk/**'
      - 'cli/**'
      - 'scripts/**'
      - '.github/workflows/release.yml'

permissions:
  contents: write

jobs:
  release:
    runs-on: ubuntu-latest

    outputs:
      version: ${{ steps.new_version.outputs.version }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.23'

      - name: Get current version
        id: get_version
        run: |
          cd cli
          if [ -f VERSION ]; then
            CURRENT_VERSION=$(cat VERSION | tr -d '\n')
            echo "current_version=$CURRENT_VERSION" >> $GITHUB_OUTPUT
          else
            echo "current_version=1.0.0" >> $GITHUB_OUTPUT
          fi

      - name: Determine version bump
        id: bump_version
        run: |
          # Get commit messages since last tag
          LAST_TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo "")

          if [ -z "$LAST_TAG" ]; then
            COMMITS=$(git log --pretty=format:"%s" HEAD)
          else
            COMMITS=$(git log --pretty=format:"%s" ${LAST_TAG}..HEAD)
          fi

          # Determine bump type based on conventional commits
          BUMP_TYPE="patch"

          if echo "$COMMITS" | grep -qiE "^(feat|feature)(\(.+\))?:"; then
            BUMP_TYPE="minor"
          fi

          if echo "$COMMITS" | grep -qiE "^.+!:|^BREAKING CHANGE:"; then
            BUMP_TYPE="major"
          fi

          echo "bump_type=$BUMP_TYPE" >> $GITHUB_OUTPUT
          echo "Detected bump type: $BUMP_TYPE"

      - name: Calculate new version
        id: new_version
        run: |
          CURRENT="${{ steps.get_version.outputs.current_version }}"
          BUMP="${{ steps.bump_version.outputs.bump_type }}"

          IFS='.' read -r -a VERSION_PARTS <<< "$CURRENT"
          MAJOR="${VERSION_PARTS[0]}"
          MINOR="${VERSION_PARTS[1]}"
          PATCH="${VERSION_PARTS[2]}"

          if [ "$BUMP" = "major" ]; then
            MAJOR=$((MAJOR + 1))
            MINOR=0
            PATCH=0
          elif [ "$BUMP" = "minor" ]; then
            MINOR=$((MINOR + 1))
            PATCH=0
          else
            PATCH=$((PATCH + 1))
          fi

          NEW_VERSION="${MAJOR}.${MINOR}.${PATCH}"
          echo "version=$NEW_VERSION" >> $GITHUB_OUTPUT
          echo "New version: $NEW_VERSION"

      - name: Update VERSION file
        run: |
          cd cli
          echo "${{ steps.new_version.outputs.version }}" > VERSION
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          git add VERSION
          git commit -m "chore: bump version to ${{ steps.new_version.outputs.version }}"
          git push

      - name: Build CLI for multiple platforms
        run: |
          VERSION="${{ steps.new_version.outputs.version }}"
          GIT_COMMIT=$(git rev-parse --short HEAD)
          BUILD_TIME=$(date -u '+%Y-%m-%d_%H:%M:%S_UTC')

          LDFLAGS="-X 'plato-cli/internal/ui/components.Version=${VERSION}' -X 'plato-cli/internal/ui/components.GitCommit=${GIT_COMMIT}' -X 'plato-cli/internal/ui/components.BuildTime=${BUILD_TIME}'"

          cd cli

          # Build for multiple platforms
          GOOS=darwin GOARCH=amd64 go build -ldflags="${LDFLAGS}" -o plato-darwin-amd64
          GOOS=darwin GOARCH=arm64 go build -ldflags="${LDFLAGS}" -o plato-darwin-arm64
          GOOS=linux GOARCH=amd64 go build -ldflags="${LDFLAGS}" -o plato-linux-amd64
          GOOS=linux GOARCH=arm64 go build -ldflags="${LDFLAGS}" -o plato-linux-arm64

          # Create archives
          tar -czf plato-darwin-amd64.tar.gz plato-darwin-amd64
          tar -czf plato-darwin-arm64.tar.gz plato-darwin-arm64
          tar -czf plato-linux-amd64.tar.gz plato-linux-amd64
          tar -czf plato-linux-arm64.tar.gz plato-linux-arm64

      - name: Build C bindings for multiple platforms
        run: |
          cd sdk/bindings/c

          # Linux AMD64
          GOOS=linux GOARCH=amd64 go build -buildmode=c-shared -o libplato-linux-amd64.so .
          tar -czf libplato-linux-amd64.tar.gz libplato-linux-amd64.so libplato-linux-amd64.h

          # Linux ARM64
          GOOS=linux GOARCH=arm64 go build -buildmode=c-shared -o libplato-linux-arm64.so .
          tar -czf libplato-linux-arm64.tar.gz libplato-linux-arm64.so libplato-linux-arm64.h

          # macOS AMD64
          GOOS=darwin GOARCH=amd64 go build -buildmode=c-shared -o libplato-darwin-amd64.dylib .
          tar -czf libplato-darwin-amd64.tar.gz libplato-darwin-amd64.dylib libplato-darwin-amd64.h

          # macOS ARM64
          GOOS=darwin GOARCH=arm64 go build -buildmode=c-shared -o libplato-darwin-arm64.dylib .
          tar -czf libplato-darwin-arm64.tar.gz libplato-darwin-arm64.dylib libplato-darwin-arm64.h

      - name: Generate release notes
        id: release_notes
        run: |
          LAST_TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo "")

          if [ -z "$LAST_TAG" ]; then
            COMMITS=$(git log --pretty=format:"- %s (%h)" HEAD)
          else
            COMMITS=$(git log --pretty=format:"- %s (%h)" ${LAST_TAG}..HEAD)
          fi

          cat > release_notes.md << 'EOF'
          ## Changes in v${{ steps.new_version.outputs.version }}

          EOF

          echo "$COMMITS" >> release_notes.md

          cat >> release_notes.md << 'EOF'

          ## CLI Installation

          ### macOS (Apple Silicon)
          ```bash
          curl -L https://github.com/${{ github.repository }}/releases/download/v${{ steps.new_version.outputs.version }}/plato-darwin-arm64.tar.gz | tar xz
          chmod +x plato-darwin-arm64
          mv plato-darwin-arm64 ~/.local/bin/plato
          ```

          ### macOS (Intel)
          ```bash
          curl -L https://github.com/${{ github.repository }}/releases/download/v${{ steps.new_version.outputs.version }}/plato-darwin-amd64.tar.gz | tar xz
          chmod +x plato-darwin-amd64
          mv plato-darwin-amd64 ~/.local/bin/plato
          ```

          ### Linux (x86_64)
          ```bash
          curl -L https://github.com/${{ github.repository }}/releases/download/v${{ steps.new_version.outputs.version }}/plato-linux-amd64.tar.gz | tar xz
          chmod +x plato-linux-amd64
          sudo mv plato-linux-amd64 /usr/local/bin/plato
          ```

          ### Linux (ARM64)
          ```bash
          curl -L https://github.com/${{ github.repository }}/releases/download/v${{ steps.new_version.outputs.version }}/plato-linux-arm64.tar.gz | tar xz
          chmod +x plato-linux-arm64
          sudo mv plato-linux-arm64 /usr/local/bin/plato
          ```

          ## C Bindings

          C shared libraries are also available for all platforms. Download and extract:

          - `libplato-darwin-arm64.tar.gz` - macOS Apple Silicon
          - `libplato-darwin-amd64.tar.gz` - macOS Intel
          - `libplato-linux-amd64.tar.gz` - Linux x86_64
          - `libplato-linux-arm64.tar.gz` - Linux ARM64

          ## Python SDK

          Install the Python SDK with:
          ```bash
          pip install plato-sdk==${{ steps.new_version.outputs.version }}
          ```

          Platform-specific wheels are available for:
          - macOS ARM64 (Apple Silicon)
          - macOS x86_64 (Intel)
          - Linux x86_64

          EOF

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: v${{ steps.new_version.outputs.version }}
          name: v${{ steps.new_version.outputs.version }}
          body_path: release_notes.md
          draft: false
          prerelease: false
          files: |
            cli/plato-darwin-amd64.tar.gz
            cli/plato-darwin-arm64.tar.gz
            cli/plato-linux-amd64.tar.gz
            cli/plato-linux-arm64.tar.gz
            sdk/bindings/c/libplato-darwin-amd64.tar.gz
            sdk/bindings/c/libplato-darwin-arm64.tar.gz
            sdk/bindings/c/libplato-linux-amd64.tar.gz
            sdk/bindings/c/libplato-linux-arm64.tar.gz
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  build-python-wheels:
    needs: release
    strategy:
      matrix:
        include:
          - os: ubuntu-latest
            platform: linux
            python-version: "3.10"
          - os: ubuntu-latest
            platform: linux
            python-version: "3.11"
          - os: ubuntu-latest
            platform: linux
            python-version: "3.12"
          - os: macos-13  # Intel Mac
            platform: macos-x86_64
            python-version: "3.10"
          - os: macos-13
            platform: macos-x86_64
            python-version: "3.11"
          - os: macos-13
            platform: macos-x86_64
            python-version: "3.12"
          - os: macos-latest  # ARM Mac
            platform: macos-arm64
            python-version: "3.10"
          - os: macos-latest
            platform: macos-arm64
            python-version: "3.11"
          - os: macos-latest
            platform: macos-arm64
            python-version: "3.12"

    runs-on: ${{ matrix.os }}

    defaults:
      run:
        working-directory: python

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          ref: main
          fetch-depth: 0

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.24'

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}

      - name: Install build tooling
        run: |
          python -m pip install --upgrade pip
          pip install build twine

      - name: Build C bindings and CLI
        working-directory: .
        run: |
          ./scripts/build-python.sh
        shell: bash

      - name: Update version in pyproject.toml
        working-directory: .
        shell: python
        run: |
          import pathlib, re
          version = "${{ needs.release.outputs.version }}"
          p = pathlib.Path("python/pyproject.toml")
          text = p.read_text(encoding="utf-8")
          patched = re.sub(r'(?m)^(\s*version\s*=\s*")([^"]+)(")',
                          r'\g<1>' + version + r'\3', text)
          p.write_text(patched, encoding="utf-8")
          print(f"Updated version to: {version}")

      - name: Build wheel
        run: python -m build --wheel

      - name: Build sdist (Linux only)
        if: matrix.platform == 'linux'
        run: python -m build --sdist

      - name: Verify wheel platform tag
        working-directory: python
        shell: python
        run: |
          import os, glob, sys

          wheels = glob.glob("dist/*.whl")
          if not wheels:
            print("ERROR: No wheel file found", file=sys.stderr)
            sys.exit(1)

          wheel = wheels[0]
          print(f"✅ Built wheel: {os.path.basename(wheel)}")

          if 'none-any' in wheel:
            print("ERROR: Wheel should be platform-specific, not 'none-any'", file=sys.stderr)
            sys.exit(1)

          print(f"✅ Wheel is platform-specific")

      - name: Publish to PyPI
        working-directory: python
        env:
          TWINE_USERNAME: __token__
          TWINE_PASSWORD: ${{ secrets.PYPI_API_TOKEN }}
        run: |
          python -m twine upload --skip-existing --verbose dist/*

      - name: Summary
        working-directory: .
        run: |
          echo "✅ Published to PyPI"
          echo ""
          echo "📦 Package: plato-sdk"
          echo "🏷️  Version: ${{ needs.release.outputs.version }}"
          echo "🖥️  Platform: ${{ matrix.platform }}"
          echo ""
          echo "Install with:"
          echo "  pip install plato-sdk==${{ needs.release.outputs.version }}"
