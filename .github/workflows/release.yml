name: Build and Release

on:
  push:
    branches:
      - main
    paths:
      - 'sdk/**'
      - 'cli/**'
      - 'scripts/**'
      - '.github/workflows/release.yml'

permissions:
  contents: write

jobs:
  release:
    runs-on: ubuntu-latest

    outputs:
      version: ${{ steps.new_version.outputs.version }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.23'

      - name: Get current version
        id: get_version
        run: |
          cd cli
          if [ -f VERSION ]; then
            CURRENT_VERSION=$(cat VERSION | tr -d '\n')
            echo "current_version=$CURRENT_VERSION" >> $GITHUB_OUTPUT
          else
            echo "current_version=1.0.0" >> $GITHUB_OUTPUT
          fi

      - name: Determine version bump
        id: bump_version
        run: |
          # Get commit messages and changed files since last tag
          LAST_TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo "")

          if [ -z "$LAST_TAG" ]; then
            COMMITS=$(git log --pretty=format:"%s" HEAD)
            CHANGED_FILES=$(git log --name-only --pretty=format:"" HEAD)
          else
            COMMITS=$(git log --pretty=format:"%s" ${LAST_TAG}..HEAD)
            CHANGED_FILES=$(git diff --name-only ${LAST_TAG}..HEAD)
          fi

          # Check if CLI files changed
          CLI_CHANGED=false
          if echo "$CHANGED_FILES" | grep -q "^cli/"; then
            CLI_CHANGED=true
            echo "🔧 CLI changes detected"
          fi

          # Determine bump type based on conventional commits
          BUMP_TYPE="patch"

          # If CLI changed, at minimum bump minor version
          if [ "$CLI_CHANGED" = true ]; then
            BUMP_TYPE="minor"
            echo "📦 CLI changed, bumping to minor version"
          fi

          # Check for explicit feature commits (overrides CLI change to minor)
          if echo "$COMMITS" | grep -qiE "^(feat|feature)(\(.+\))?:"; then
            BUMP_TYPE="minor"
            echo "✨ Feature detected, bumping to minor version"
          fi

          # Breaking changes always take precedence
          if echo "$COMMITS" | grep -qiE "^.+!:|^BREAKING CHANGE:"; then
            BUMP_TYPE="major"
            echo "💥 Breaking change detected, bumping to major version"
          fi

          echo "bump_type=$BUMP_TYPE" >> $GITHUB_OUTPUT
          echo "Final bump type: $BUMP_TYPE"

      - name: Calculate new version
        id: new_version
        run: |
          CURRENT="${{ steps.get_version.outputs.current_version }}"
          BUMP="${{ steps.bump_version.outputs.bump_type }}"

          IFS='.' read -r -a VERSION_PARTS <<< "$CURRENT"
          MAJOR="${VERSION_PARTS[0]}"
          MINOR="${VERSION_PARTS[1]}"
          PATCH="${VERSION_PARTS[2]}"

          if [ "$BUMP" = "major" ]; then
            MAJOR=$((MAJOR + 1))
            MINOR=0
            PATCH=0
          elif [ "$BUMP" = "minor" ]; then
            MINOR=$((MINOR + 1))
            PATCH=0
          else
            PATCH=$((PATCH + 1))
          fi

          NEW_VERSION="${MAJOR}.${MINOR}.${PATCH}"
          echo "version=$NEW_VERSION" >> $GITHUB_OUTPUT
          echo "New version: $NEW_VERSION"

      - name: Update VERSION file
        run: |
          cd cli
          echo "${{ steps.new_version.outputs.version }}" > VERSION
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          git add VERSION
          git commit -m "chore: bump version to ${{ steps.new_version.outputs.version }}"
          git push

      - name: Build proxytunnel
        run: |
          sudo apt-get update && sudo apt-get install -y proxytunnel
          ./scripts/build-proxytunnel.sh || echo "⚠️  Failed to build proxytunnel, continuing"

      - name: Build CLI for multiple platforms (cross-compile)
        run: |
          VERSION="${{ steps.new_version.outputs.version }}"
          GIT_COMMIT=$(git rev-parse --short HEAD)
          BUILD_TIME=$(date -u '+%Y-%m-%d_%H:%M:%S_UTC')

          LDFLAGS="-X 'plato-cli/internal/ui/components.Version=${VERSION}' -X 'plato-cli/internal/ui/components.GitCommit=${GIT_COMMIT}' -X 'plato-cli/internal/ui/components.BuildTime=${BUILD_TIME}'"

          cd cli

          # Build for multiple platforms (pure Go, no CGO)
          GOOS=darwin GOARCH=amd64 go build -ldflags="${LDFLAGS}" -o plato-darwin-amd64
          GOOS=darwin GOARCH=arm64 go build -ldflags="${LDFLAGS}" -o plato-darwin-arm64
          GOOS=linux GOARCH=amd64 go build -ldflags="${LDFLAGS}" -o plato-linux-amd64
          GOOS=linux GOARCH=arm64 go build -ldflags="${LDFLAGS}" -o plato-linux-arm64

          # Bundle proxytunnel with each CLI binary
          echo "📦 Bundling proxytunnel binaries..."
          PROXYTUNNEL_SRC="../python/src/plato/bin"

          # Create temp directories for each platform
          for platform in darwin-amd64 darwin-arm64 linux-amd64 linux-arm64; do
            mkdir -p "plato-${platform}-bundle"
            mv "plato-${platform}" "plato-${platform}-bundle/plato"

            # Copy appropriate proxytunnel binary
            if [[ "$platform" == *"darwin"* ]]; then
              if [[ "$platform" == *"arm64"* ]]; then
                cp "$PROXYTUNNEL_SRC/proxytunnel-darwin-arm64" "plato-${platform}-bundle/" || echo "⚠️  proxytunnel-darwin-arm64 not found"
              else
                cp "$PROXYTUNNEL_SRC/proxytunnel-darwin-amd64" "plato-${platform}-bundle/" || echo "⚠️  proxytunnel-darwin-amd64 not found"
              fi
            else
              if [[ "$platform" == *"arm64"* ]]; then
                cp "$PROXYTUNNEL_SRC/proxytunnel-linux-arm64" "plato-${platform}-bundle/" || echo "⚠️  proxytunnel-linux-arm64 not found"
              else
                cp "$PROXYTUNNEL_SRC/proxytunnel-linux-amd64" "plato-${platform}-bundle/" || echo "⚠️  proxytunnel-linux-amd64 not found"
              fi
            fi

            # Create archive with both binaries
            tar -czf "plato-${platform}.tar.gz" -C "plato-${platform}-bundle" .
            rm -rf "plato-${platform}-bundle"
            echo "✅ Created plato-${platform}.tar.gz"
          done

      - name: Generate release notes
        id: release_notes
        run: |
          LAST_TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo "")

          if [ -z "$LAST_TAG" ]; then
            COMMITS=$(git log --pretty=format:"- %s (%h)" HEAD)
          else
            COMMITS=$(git log --pretty=format:"- %s (%h)" ${LAST_TAG}..HEAD)
          fi

          cat > release_notes.md << 'EOF'
          ## Changes

          EOF

          echo "$COMMITS" >> release_notes.md

          cat >> release_notes.md << 'EOF'

          ## Installation

          ### Python SDK
          ```bash
          pip install plato-sdk==${{ steps.new_version.outputs.version }}
          ```

          ### CLI
          Download the appropriate CLI binary for your platform from the assets below.

          EOF

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: v${{ steps.new_version.outputs.version }}
          name: v${{ steps.new_version.outputs.version }}
          body_path: release_notes.md
          draft: false
          prerelease: false
          files: |
            cli/plato-darwin-amd64.tar.gz
            cli/plato-darwin-arm64.tar.gz
            cli/plato-linux-amd64.tar.gz
            cli/plato-linux-arm64.tar.gz
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  build-python-wheels:
    needs: release
    strategy:
      matrix:
        include:
          - os: ubuntu-latest
            platform: linux
            python-version: "3.10"
          - os: ubuntu-latest
            platform: linux
            python-version: "3.11"
          - os: ubuntu-latest
            platform: linux
            python-version: "3.12"
          - os: macos-13  # Intel Mac
            platform: macos-x86_64
            python-version: "3.10"
          - os: macos-13
            platform: macos-x86_64
            python-version: "3.11"
          - os: macos-13
            platform: macos-x86_64
            python-version: "3.12"
          - os: macos-latest  # ARM Mac
            platform: macos-arm64
            python-version: "3.10"
          - os: macos-latest
            platform: macos-arm64
            python-version: "3.11"
          - os: macos-latest
            platform: macos-arm64
            python-version: "3.12"

    runs-on: ${{ matrix.os }}

    defaults:
      run:
        working-directory: python

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          ref: main
          fetch-depth: 0

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.24'

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}

      - name: Install build tooling
        run: |
          python -m pip install --upgrade pip
          pip install build twine

      - name: Build C bindings and CLI
        working-directory: .
        run: |
          ./scripts/build-python.sh
        shell: bash

      - name: Update version in pyproject.toml
        working-directory: .
        shell: python
        run: |
          import pathlib, re
          version = "${{ needs.release.outputs.version }}"
          p = pathlib.Path("python/pyproject.toml")
          text = p.read_text(encoding="utf-8")
          patched = re.sub(r'(?m)^(\s*version\s*=\s*")([^"]+)(")',
                          r'\g<1>' + version + r'\3', text)
          p.write_text(patched, encoding="utf-8")
          print(f"Updated version to: {version}")

      - name: Build wheel
        run: python -m build --wheel

      - name: Build sdist (Linux only)
        if: matrix.platform == 'linux'
        run: python -m build --sdist

      - name: Fix Linux wheel tag (if needed)
        if: matrix.platform == 'linux'
        working-directory: python
        shell: python
        run: |
          import os, glob, shutil

          wheels = glob.glob("dist/*.whl")
          if not wheels:
            print("ERROR: No wheel file found")
            exit(1)

          # Fix all wheels in the dist directory
          for wheel in wheels:
            print(f"Checking wheel: {os.path.basename(wheel)}")

            # If it has linux_x86_64, rename to manylinux
            if 'linux_x86_64' in wheel:
              new_wheel = wheel.replace('linux_x86_64', 'manylinux_2_17_x86_64.manylinux2014_x86_64')
              shutil.move(wheel, new_wheel)
              print(f"✅ Fixed wheel tag: {os.path.basename(new_wheel)}")
            else:
              print(f"✅ Wheel already has correct tag: {os.path.basename(wheel)}")

      - name: Verify wheel platform tag
        working-directory: python
        shell: python
        run: |
          import os, glob, sys

          wheels = glob.glob("dist/*.whl")
          if not wheels:
            print("ERROR: No wheel file found", file=sys.stderr)
            sys.exit(1)

          wheel = wheels[0]
          print(f"✅ Built wheel: {os.path.basename(wheel)}")

          if 'none-any' in wheel:
            print("ERROR: Wheel should be platform-specific, not 'none-any'", file=sys.stderr)
            sys.exit(1)

          print(f"✅ Wheel is platform-specific")

      - name: Publish to PyPI
        working-directory: python
        env:
          TWINE_USERNAME: __token__
          TWINE_PASSWORD: ${{ secrets.PYPI_API_TOKEN }}
        run: |
          python -m twine upload --skip-existing --verbose dist/*

      - name: Summary
        working-directory: .
        run: |
          echo "✅ Published to PyPI"
          echo ""
          echo "📦 Package: plato-sdk"
          echo "🏷️  Version: ${{ needs.release.outputs.version }}"
          echo "🖥️  Platform: ${{ matrix.platform }}"
          echo ""
          echo "Install with:"
          echo "  pip install plato-sdk==${{ needs.release.outputs.version }}"
