/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export type paths = Record<string, never>;
export type webhooks = Record<string, never>;
export type components = {
    schemas: {
        CreateSnapshotRequest: {
            dataset?: string;
            git_hash?: string;
            service?: string;
        } & {
            [key: string]: unknown;
        };
        CreateSnapshotResponse: {
            artifact_id: string;
            correlation_id: string;
            git_hash?: string;
            s3_uri: string;
            status: string;
            timestamp: string;
        } & {
            [key: string]: unknown;
        };
        Environment: {
            alias?: string;
            job_id: string;
            status?: string;
        } & {
            [key: string]: unknown;
        };
        PlatoConfig: {
            datasets?: {
                [key: string]: components["schemas"]["SimConfigDataset"];
            };
            service?: string;
        } & {
            [key: string]: unknown;
        };
        Sandbox: {
            correlation_id?: string;
            job_group_id: string;
            job_id: string;
            public_id: string;
            status?: string;
            url?: string;
        } & {
            [key: string]: unknown;
        };
        SimConfigCompute: {
            /** Format: int32 */
            app_port: number;
            /** Format: int32 */
            cpus: number;
            /** Format: int32 */
            disk: number;
            /** Format: int32 */
            memory: number;
            /** Format: int32 */
            plato_messaging_port: number;
        } & {
            [key: string]: unknown;
        };
        SimConfigDataset: {
            compute: components["schemas"]["SimConfigCompute"];
            listeners?: {
                [key: string]: components["schemas"]["SimConfigListener"];
            };
            metadata: components["schemas"]["SimConfigMetadata"];
            services?: {
                [key: string]: components["schemas"]["SimConfigService"];
            };
        } & {
            [key: string]: unknown;
        };
        SimConfigListener: {
            db_database?: string;
            db_host?: string;
            db_password?: string;
            /** Format: int32 */
            db_port?: number;
            db_type?: string;
            db_user?: string;
            ignore_patterns?: string[];
            seed_data_path?: string;
            seed_data_paths?: string[];
            target_dir?: string;
            /** @enum {string} */
            type: "db" | "file" | "proxy";
            volumes?: string[];
            watch_enabled?: boolean;
            watch_patterns?: string[];
        } & {
            [key: string]: unknown;
        };
        SimConfigMetadata: {
            description?: string;
            favicon?: string;
            flows_path?: string;
            license?: string;
            name: string;
            source_code_url?: string;
            start_url?: string;
            variables?: components["schemas"]["Variable"][];
        } & {
            [key: string]: unknown;
        };
        SimConfigService: {
            file?: string;
            /** Format: int32 */
            healthy_wait_timeout?: number;
            required_healthy_containers?: string[];
            type: string;
        } & {
            [key: string]: unknown;
        };
        SimulatorListItem: {
            artifact_id?: string;
            description?: string;
            name: string;
        } & {
            [key: string]: unknown;
        };
        StartWorkerRequest: {
            dataset: string;
            plato_dataset_config: components["schemas"]["SimConfigDataset"];
            service?: string;
            /** Format: int32 */
            timeout?: number;
        } & {
            [key: string]: unknown;
        };
        StartWorkerResponse: {
            correlation_id: string;
            status: string;
            timestamp: string;
        } & {
            [key: string]: unknown;
        };
        Variable: {
            name: string;
            value: string;
        } & {
            [key: string]: unknown;
        };
    };
    responses: never;
    parameters: never;
    requestBodies: never;
    headers: never;
    pathItems: never;
};
export type $defs = Record<string, never>;
export type operations = Record<string, never>;
