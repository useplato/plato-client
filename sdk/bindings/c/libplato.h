/* Code generated by cmd/cgo; DO NOT EDIT. */

/* package plato-bindings */


#line 1 "cgo-builtin-export-prolog"

#include <stddef.h>

#ifndef GO_CGO_EXPORT_PROLOGUE_H
#define GO_CGO_EXPORT_PROLOGUE_H

#ifndef GO_CGO_GOSTRING_TYPEDEF
typedef struct { const char *p; ptrdiff_t n; } _GoString_;
extern size_t _GoStringLen(_GoString_ s);
extern const char *_GoStringPtr(_GoString_ s);
#endif

#endif

/* Start of preamble from import "C" comments.  */


#line 8 "sandbox.go"

#include <stdlib.h>
#include <string.h>

typedef struct {
    char* job_id;
    char* public_id;
    char* job_group_id;
    char* url;
    char* status;
    char* correlation_id;
} CSandbox;

typedef struct {
    char* error;
    int code;
} CError;


#line 1 "cgo-generated-wrapper"


/* End of preamble from import "C" comments.  */


/* Start of boilerplate cgo prologue.  */
#line 1 "cgo-gcc-export-header-prolog"

#ifndef GO_CGO_PROLOGUE_H
#define GO_CGO_PROLOGUE_H

typedef signed char GoInt8;
typedef unsigned char GoUint8;
typedef short GoInt16;
typedef unsigned short GoUint16;
typedef int GoInt32;
typedef unsigned int GoUint32;
typedef long long GoInt64;
typedef unsigned long long GoUint64;
typedef GoInt64 GoInt;
typedef GoUint64 GoUint;
typedef size_t GoUintptr;
typedef float GoFloat32;
typedef double GoFloat64;
#ifdef _MSC_VER
#if !defined(__cplusplus) || _MSVC_LANG <= 201402L
#include <complex.h>
typedef _Fcomplex GoComplex64;
typedef _Dcomplex GoComplex128;
#else
#include <complex>
typedef std::complex<float> GoComplex64;
typedef std::complex<double> GoComplex128;
#endif
#else
typedef float _Complex GoComplex64;
typedef double _Complex GoComplex128;
#endif

/*
  static assertion to make sure the file is being used on architecture
  at least with matching size of GoInt.
*/
typedef char _check_for_64_bit_pointer_matching_GoInt[sizeof(void*)==64/8 ? 1:-1];

#ifndef GO_CGO_GOSTRING_TYPEDEF
typedef _GoString_ GoString;
#endif
typedef void *GoMap;
typedef void *GoChan;
typedef struct { void *t; void *v; } GoInterface;
typedef struct { void *data; GoInt len; GoInt cap; } GoSlice;

#endif

/* End of boilerplate cgo prologue.  */

#ifdef __cplusplus
extern "C" {
#endif


// PlatoInit initializes a new Plato client and returns a client handle
//
extern int64_t PlatoInit(char* apiKey);

// PlatoFree releases a Plato client handle
//
extern void PlatoFree(int64_t clientHandle);

// PlatoSandboxCreate creates a new sandbox
// configJSON should be a JSON string of SimConfigDataset
// Returns a CSandbox pointer or NULL on error
//
extern CSandbox* PlatoSandboxCreate(int64_t clientHandle, char* configJSON, char* dataset, char* alias, char* artifactID, char* service, CError** errOut);

// PlatoSandboxSetup sets up a sandbox with SSH key
//
extern char* PlatoSandboxSetup(int64_t clientHandle, char* jobID, char* configJSON, char* dataset, char* sshPublicKey, CError** errOut);

// PlatoSandboxMonitor monitors an operation via SSE and returns when complete
//
extern void PlatoSandboxMonitor(int64_t clientHandle, char* correlationID, int timeoutSeconds, CError** errOut);

// PlatoSandboxStartHeartbeat starts automatic heartbeat for a sandbox
// interval is in seconds
//
extern void PlatoSandboxStartHeartbeat(int64_t clientHandle, char* jobGroupID, int intervalSeconds, CError** errOut);

// PlatoSandboxStopHeartbeat stops automatic heartbeat for a sandbox
//
extern void PlatoSandboxStopHeartbeat(char* jobGroupID);

// PlatoSandboxSendHeartbeat sends a single heartbeat
//
extern void PlatoSandboxSendHeartbeat(int64_t clientHandle, char* jobGroupID, CError** errOut);

// PlatoSandboxGet retrieves a sandbox by job ID
//
extern CSandbox* PlatoSandboxGet(int64_t clientHandle, char* jobID, CError** errOut);

// PlatoSandboxDelete deletes a sandbox by job ID
//
extern void PlatoSandboxDelete(int64_t clientHandle, char* jobID, CError** errOut);

// PlatoSandboxDeleteVM deletes a VM by public ID
//
extern void PlatoSandboxDeleteVM(int64_t clientHandle, char* publicID, CError** errOut);

// PlatoFreeSandbox releases memory allocated for a CSandbox
//
extern void PlatoFreeSandbox(CSandbox* sandbox);

// PlatoFreeString releases memory allocated for a C string
//
extern void PlatoFreeString(char* s);

// PlatoFreeError releases memory allocated for a CError
//
extern void PlatoFreeError(CError* err);

#ifdef __cplusplus
}
#endif
