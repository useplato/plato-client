// Package models provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.5.0 DO NOT EDIT.
package models

// Defines values for SimConfigListenerType.
const (
	Db    SimConfigListenerType = "db"
	File  SimConfigListenerType = "file"
	Proxy SimConfigListenerType = "proxy"
)

// CreateSnapshotRequest defines model for CreateSnapshotRequest.
type CreateSnapshotRequest struct {
	Dataset *string `json:"dataset,omitempty"`
	GitHash *string `json:"git_hash,omitempty"`
	Service *string `json:"service,omitempty"`
}

// CreateSnapshotResponse defines model for CreateSnapshotResponse.
type CreateSnapshotResponse struct {
	ArtifactId    string  `json:"artifact_id"`
	CorrelationId string  `json:"correlation_id"`
	GitHash       *string `json:"git_hash,omitempty"`
	S3Uri         string  `json:"s3_uri"`
	Status        string  `json:"status"`
	Timestamp     string  `json:"timestamp"`
}

// CreateSnapshotWithCleanupRequest defines model for CreateSnapshotWithCleanupRequest.
type CreateSnapshotWithCleanupRequest struct {
	// BranchName Branch name to merge to main before snapshot
	BranchName *string `json:"branch_name,omitempty"`

	// Dataset Dataset name
	Dataset  *string   `json:"dataset,omitempty"`
	DbConfig *DBConfig `json:"db_config,omitempty"`

	// GitHash Git commit hash
	GitHash *string `json:"git_hash,omitempty"`

	// JobGroupId Job group ID for clearing env state
	JobGroupId string `json:"job_group_id"`

	// Service Service name
	Service string `json:"service"`
}

// DBConfig defines model for DBConfig.
type DBConfig struct {
	// Databases List of database names
	Databases []string `json:"databases"`

	// DbType Database type (postgresql, mysql, etc.)
	DbType string `json:"db_type"`

	// DestPort Database port
	DestPort int32 `json:"dest_port"`

	// Password Database password
	Password string `json:"password"`

	// User Database user
	User string `json:"user"`
}

// Environment defines model for Environment.
type Environment struct {
	Alias  *string `json:"alias,omitempty"`
	EnvId  *string `json:"env_id,omitempty"`
	JobId  string  `json:"job_id"`
	Status *string `json:"status,omitempty"`
}

// GiteaCredentials defines model for GiteaCredentials.
type GiteaCredentials struct {
	OrgName  string `json:"org_name"`
	Password string `json:"password"`
	Username string `json:"username"`
}

// GiteaRepository defines model for GiteaRepository.
type GiteaRepository struct {
	CloneUrl    string `json:"clone_url"`
	Description string `json:"description"`
	FullName    string `json:"full_name"`
	HasRepo     bool   `json:"has_repo"`
	Name        string `json:"name"`
	Private     bool   `json:"private"`
	SshUrl      string `json:"ssh_url"`
}

// GiteaSimulator defines model for GiteaSimulator.
type GiteaSimulator struct {
	GiteaRepoName  string `json:"gitea_repo_name"`
	GiteaRepoOwner string `json:"gitea_repo_owner"`
	HasRepo        bool   `json:"has_repo"`
	Id             int32  `json:"id"`
	Name           string `json:"name"`
}

// JobMetrics defines model for JobMetrics.
type JobMetrics struct {
	OrganizationId    int32    `json:"organization_id"`
	P50TimeToStart    *float64 `json:"p50_time_to_start,omitempty"`
	P90TimeToStart    *float64 `json:"p90_time_to_start,omitempty"`
	P99TimeToStart    *float64 `json:"p99_time_to_start,omitempty"`
	TimeWindowHours   float64  `json:"time_window_hours"`
	TotalJobsAnalyzed int32    `json:"total_jobs_analyzed"`
}

// JobStatus defines model for JobStatus.
type JobStatus struct {
	Status string `json:"status"`
}

// Organization defines model for Organization.
type Organization struct {
	ApiKey string `json:"api_key"`
	Id     int32  `json:"id"`
	Name   string `json:"name"`
}

// OrganizationMember defines model for OrganizationMember.
type OrganizationMember struct {
	Email string `json:"email"`
	Id    int32  `json:"id"`
	Name  string `json:"name"`
	Role  string `json:"role"`
}

// PlatoConfig defines model for PlatoConfig.
type PlatoConfig struct {
	Datasets *map[string]SimConfigDataset `json:"datasets,omitempty"`
	Service  *string                      `json:"service,omitempty"`
}

// ResetResponse defines model for ResetResponse.
type ResetResponse struct {
	Data *struct {
		RunSessionId *string `json:"run_session_id,omitempty"`
	} `json:"data,omitempty"`
	Error   *string `json:"error,omitempty"`
	Success bool    `json:"success"`
}

// RunningJobsResponse defines model for RunningJobsResponse.
type RunningJobsResponse struct {
	OrganizationId int32 `json:"organization_id"`
	RunningJobs    int32 `json:"running_jobs"`
}

// SSHInfo defines model for SSHInfo.
type SSHInfo struct {
	CorrelationId  string `json:"correlation_id"`
	PrivateKeyPath string `json:"private_key_path"`
	PublicId       string `json:"public_id"`
	PublicKey      string `json:"public_key"`
	SshCommand     string `json:"ssh_command"`
	SshConfigPath  string `json:"ssh_config_path"`
	SshHost        string `json:"ssh_host"`
}

// Sandbox defines model for Sandbox.
type Sandbox struct {
	CorrelationId *string `json:"correlation_id,omitempty"`
	JobGroupId    string  `json:"job_group_id"`
	JobId         string  `json:"job_id"`
	PublicId      string  `json:"public_id"`
	Status        *string `json:"status,omitempty"`
	Url           *string `json:"url,omitempty"`
}

// SessionSummary defines model for SessionSummary.
type SessionSummary struct {
	LastNHours       int32 `json:"last_n_hours"`
	OrganizationId   int32 `json:"organization_id"`
	PeakRunningCount int32 `json:"peak_running_count"`
	PendingSessions  int32 `json:"pending_sessions"`
	RunningSessions  int32 `json:"running_sessions"`
}

// SimConfigCompute defines model for SimConfigCompute.
type SimConfigCompute struct {
	AppPort            int32 `json:"app_port"`
	Cpus               int32 `json:"cpus"`
	Disk               int32 `json:"disk"`
	Memory             int32 `json:"memory"`
	PlatoMessagingPort int32 `json:"plato_messaging_port"`
}

// SimConfigDataset defines model for SimConfigDataset.
type SimConfigDataset struct {
	Compute   SimConfigCompute              `json:"compute"`
	Listeners *map[string]SimConfigListener `json:"listeners,omitempty"`
	Metadata  SimConfigMetadata             `json:"metadata"`
	Services  *map[string]SimConfigService  `json:"services,omitempty"`
}

// SimConfigListener defines model for SimConfigListener.
type SimConfigListener struct {
	DbDatabase     *string               `json:"db_database,omitempty"`
	DbHost         *string               `json:"db_host,omitempty"`
	DbPassword     *string               `json:"db_password,omitempty"`
	DbPort         *int32                `json:"db_port,omitempty"`
	DbType         *string               `json:"db_type,omitempty"`
	DbUser         *string               `json:"db_user,omitempty"`
	IgnorePatterns *[]string             `json:"ignore_patterns,omitempty"`
	SeedDataPath   *string               `json:"seed_data_path,omitempty"`
	SeedDataPaths  *[]string             `json:"seed_data_paths,omitempty"`
	TargetDir      *string               `json:"target_dir,omitempty"`
	Type           SimConfigListenerType `json:"type"`
	Volumes        *[]string             `json:"volumes,omitempty"`
	WatchEnabled   *bool                 `json:"watch_enabled,omitempty"`
	WatchPatterns  *[]string             `json:"watch_patterns,omitempty"`
}

// SimConfigListenerType defines model for SimConfigListener.Type.
type SimConfigListenerType string

// SimConfigMetadata defines model for SimConfigMetadata.
type SimConfigMetadata struct {
	Description   *string     `json:"description,omitempty"`
	Favicon       *string     `json:"favicon,omitempty"`
	FlowsPath     *string     `json:"flows_path,omitempty"`
	License       *string     `json:"license,omitempty"`
	Name          string      `json:"name"`
	SourceCodeUrl *string     `json:"source_code_url,omitempty"`
	StartUrl      *string     `json:"start_url,omitempty"`
	Variables     *[]Variable `json:"variables,omitempty"`
}

// SimConfigService defines model for SimConfigService.
type SimConfigService struct {
	File                      *string   `json:"file,omitempty"`
	HealthyWaitTimeout        *int32    `json:"healthy_wait_timeout,omitempty"`
	RequiredHealthyContainers *[]string `json:"required_healthy_containers,omitempty"`
	Type                      string    `json:"type"`
}

// SimulatorListItem defines model for SimulatorListItem.
type SimulatorListItem struct {
	ArtifactId  *string `json:"artifact_id,omitempty"`
	Description *string `json:"description,omitempty"`
	Name        string  `json:"name"`
}

// SimulatorVersion defines model for SimulatorVersion.
type SimulatorVersion struct {
	ArtifactId string `json:"artifact_id"`
	CreatedAt  string `json:"created_at"`
	Dataset    string `json:"dataset"`
	Version    string `json:"version"`
}

// StartWorkerRequest defines model for StartWorkerRequest.
type StartWorkerRequest struct {
	Dataset            string           `json:"dataset"`
	PlatoDatasetConfig SimConfigDataset `json:"plato_dataset_config"`
	Service            *string          `json:"service,omitempty"`
	Timeout            *int32           `json:"timeout,omitempty"`
}

// StartWorkerResponse defines model for StartWorkerResponse.
type StartWorkerResponse struct {
	CorrelationId string `json:"correlation_id"`
	Status        string `json:"status"`
	Timestamp     string `json:"timestamp"`
}

// Variable defines model for Variable.
type Variable struct {
	Name  string `json:"name"`
	Value string `json:"value"`
}

// WorkerStatus defines model for WorkerStatus.
type WorkerStatus struct {
	Error *string `json:"error,omitempty"`
	Ready bool    `json:"ready"`
}
