// Package models provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.5.0 DO NOT EDIT.
package models

// Defines values for OperationEventType.
const (
	Connected OperationEventType = "connected"
	Error     OperationEventType = "error"
	Progress  OperationEventType = "progress"
	RunResult OperationEventType = "run_result"
	SshResult OperationEventType = "ssh_result"
)

// Defines values for PlatoTaskMetadataReasoningLevel.
const (
	PlatoTaskMetadataReasoningLevelLevel1 PlatoTaskMetadataReasoningLevel = "level_1"
	PlatoTaskMetadataReasoningLevelLevel2 PlatoTaskMetadataReasoningLevel = "level_2"
	PlatoTaskMetadataReasoningLevelLevel3 PlatoTaskMetadataReasoningLevel = "level_3"
	PlatoTaskMetadataReasoningLevelLevel4 PlatoTaskMetadataReasoningLevel = "level_4"
	PlatoTaskMetadataReasoningLevelLevel5 PlatoTaskMetadataReasoningLevel = "level_5"
)

// Defines values for ScoringType.
const (
	ScoringTypeMutations ScoringType = "mutations"
	ScoringTypeOutput    ScoringType = "output"
)

// Defines values for SimConfigListenerType.
const (
	Db    SimConfigListenerType = "db"
	File  SimConfigListenerType = "file"
	Proxy SimConfigListenerType = "proxy"
)

// Defines values for TaskMetadataReasoningLevel.
const (
	TaskMetadataReasoningLevelLevel1 TaskMetadataReasoningLevel = "level_1"
	TaskMetadataReasoningLevelLevel2 TaskMetadataReasoningLevel = "level_2"
	TaskMetadataReasoningLevelLevel3 TaskMetadataReasoningLevel = "level_3"
	TaskMetadataReasoningLevelLevel4 TaskMetadataReasoningLevel = "level_4"
	TaskMetadataReasoningLevelLevel5 TaskMetadataReasoningLevel = "level_5"
)

// Defines values for TestCaseScoringTypes.
const (
	TestCaseScoringTypesMutations TestCaseScoringTypes = "mutations"
	TestCaseScoringTypesOutput    TestCaseScoringTypes = "output"
)

// ActiveSessionResponse defines model for ActiveSessionResponse.
type ActiveSessionResponse struct {
	Error     *string `json:"error,omitempty"`
	SessionId *string `json:"session_id,omitempty"`
}

// BackupEnvironmentResponse defines model for BackupEnvironmentResponse.
type BackupEnvironmentResponse struct {
	Data    *map[string]interface{} `json:"data,omitempty"`
	Message *string                 `json:"message,omitempty"`
	Success *bool                   `json:"success,omitempty"`
}

// CdpUrlResponse defines model for CdpUrlResponse.
type CdpUrlResponse struct {
	Data *struct {
		CdpUrl *string `json:"cdp_url,omitempty"`
	} `json:"data,omitempty"`
	Error *string `json:"error,omitempty"`
}

// CloseEnvironmentResponse defines model for CloseEnvironmentResponse.
type CloseEnvironmentResponse struct {
	Message *string `json:"message,omitempty"`
	Success *bool   `json:"success,omitempty"`
}

// CreateSandboxRequest defines model for CreateSandboxRequest.
type CreateSandboxRequest struct {
	// Alias Human-readable alias for the sandbox
	Alias *string `json:"alias,omitempty"`

	// ArtifactId Optional artifact ID to create sandbox from snapshot
	ArtifactId *string `json:"artifact_id,omitempty"`

	// Dataset Dataset name (e.g., "base")
	Dataset            string           `json:"dataset"`
	PlatoDatasetConfig SimConfigDataset `json:"plato_dataset_config"`

	// Service Service name
	Service *string `json:"service,omitempty"`

	// Timeout Timeout in seconds for sandbox creation
	Timeout *int32 `json:"timeout,omitempty"`

	// WaitTime Wait time in seconds
	WaitTime *int32 `json:"wait_time,omitempty"`
}

// CreateSandboxResponse defines model for CreateSandboxResponse.
type CreateSandboxResponse struct {
	// CorrelationId Correlation ID for monitoring operation progress via SSE
	CorrelationId *string `json:"correlation_id,omitempty"`

	// JobGroupId Job group ID for the sandbox
	JobGroupId string `json:"job_group_id"`

	// JobPublicId Public ID of the sandbox job
	JobPublicId string `json:"job_public_id"`

	// Status Current status of the sandbox
	Status *string `json:"status,omitempty"`

	// Url Public URL for the sandbox
	Url *string `json:"url,omitempty"`
}

// CreateSnapshotRequest defines model for CreateSnapshotRequest.
type CreateSnapshotRequest struct {
	Dataset *string `json:"dataset,omitempty"`
	GitHash *string `json:"git_hash,omitempty"`
	Service *string `json:"service,omitempty"`
}

// CreateSnapshotResponse defines model for CreateSnapshotResponse.
type CreateSnapshotResponse struct {
	ArtifactId    string  `json:"artifact_id"`
	CorrelationId string  `json:"correlation_id"`
	GitHash       *string `json:"git_hash,omitempty"`
	S3Uri         string  `json:"s3_uri"`
	Status        string  `json:"status"`
	Timestamp     string  `json:"timestamp"`
}

// CreateSnapshotWithCleanupRequest defines model for CreateSnapshotWithCleanupRequest.
type CreateSnapshotWithCleanupRequest struct {
	// BranchName Branch name to merge to main before snapshot
	BranchName *string `json:"branch_name,omitempty"`

	// Dataset Dataset name
	Dataset  *string   `json:"dataset,omitempty"`
	DbConfig *DBConfig `json:"db_config,omitempty"`

	// GitHash Git commit hash
	GitHash *string `json:"git_hash,omitempty"`

	// JobGroupId Job group ID for clearing env state
	JobGroupId string `json:"job_group_id"`

	// Service Service name
	Service string `json:"service"`
}

// DBConfig defines model for DBConfig.
type DBConfig struct {
	// Databases List of database names
	Databases []string `json:"databases"`

	// DbType Database type (postgresql, mysql, etc.)
	DbType string `json:"db_type"`

	// DestPort Database port
	DestPort int32 `json:"dest_port"`

	// Password Database password
	Password string `json:"password"`

	// User Database user
	User string `json:"user"`
}

// DeleteSandboxResponse defines model for DeleteSandboxResponse.
type DeleteSandboxResponse struct {
	Message *string `json:"message,omitempty"`
	Success *bool   `json:"success,omitempty"`
}

// Environment defines model for Environment.
type Environment struct {
	Alias  *string `json:"alias,omitempty"`
	EnvId  *string `json:"env_id,omitempty"`
	JobId  string  `json:"job_id"`
	Status *string `json:"status,omitempty"`
}

// EnvironmentStateResponse defines model for EnvironmentStateResponse.
type EnvironmentStateResponse struct {
	Data *struct {
		State *map[string]interface{} `json:"state,omitempty"`
	} `json:"data,omitempty"`
}

// ErrorResponse defines model for ErrorResponse.
type ErrorResponse struct {
	Error   *string `json:"error,omitempty"`
	Message *string `json:"message,omitempty"`
}

// EvaluateRequest defines model for EvaluateRequest.
type EvaluateRequest struct {
	Value *map[string]interface{} `json:"value,omitempty"`
}

// EvaluateResponse defines model for EvaluateResponse.
type EvaluateResponse struct {
	Score *struct {
		Result *struct {
			Correct           *bool                     `json:"correct,omitempty"`
			Diffs             *[]map[string]interface{} `json:"diffs,omitempty"`
			ExpectedMutations *[]map[string]interface{} `json:"expected_mutations,omitempty"`
			Mutations         *[]map[string]interface{} `json:"mutations,omitempty"`
			Reason            *string                   `json:"reason,omitempty"`
		} `json:"result,omitempty"`
	} `json:"score,omitempty"`
}

// EvaluationResult defines model for EvaluationResult.
type EvaluationResult struct {
	ActualMutations   *[]map[string]interface{} `json:"actual_mutations,omitempty"`
	Diffs             *[]map[string]interface{} `json:"diffs,omitempty"`
	ExpectedMutations *[]map[string]interface{} `json:"expected_mutations,omitempty"`
	Reason            *string                   `json:"reason,omitempty"`
	Success           bool                      `json:"success"`
}

// GiteaCredentials defines model for GiteaCredentials.
type GiteaCredentials struct {
	OrgName  string `json:"org_name"`
	Password string `json:"password"`
	Username string `json:"username"`
}

// GiteaRepository defines model for GiteaRepository.
type GiteaRepository struct {
	CloneUrl    string `json:"clone_url"`
	Description string `json:"description"`
	FullName    string `json:"full_name"`
	HasRepo     bool   `json:"has_repo"`
	Name        string `json:"name"`
	Private     bool   `json:"private"`
	SshUrl      string `json:"ssh_url"`
}

// GiteaSimulator defines model for GiteaSimulator.
type GiteaSimulator struct {
	GiteaRepoName  string `json:"gitea_repo_name"`
	GiteaRepoOwner string `json:"gitea_repo_owner"`
	HasRepo        bool   `json:"has_repo"`
	Id             int32  `json:"id"`
	Name           string `json:"name"`
}

// HeartbeatResponse defines model for HeartbeatResponse.
type HeartbeatResponse struct {
	Success   *bool   `json:"success,omitempty"`
	Timestamp *string `json:"timestamp,omitempty"`
}

// JobMetrics defines model for JobMetrics.
type JobMetrics struct {
	OrganizationId    int32    `json:"organization_id"`
	P50TimeToStart    *float64 `json:"p50_time_to_start,omitempty"`
	P90TimeToStart    *float64 `json:"p90_time_to_start,omitempty"`
	P99TimeToStart    *float64 `json:"p99_time_to_start,omitempty"`
	TimeWindowHours   float64  `json:"time_window_hours"`
	TotalJobsAnalyzed int32    `json:"total_jobs_analyzed"`
}

// JobStatus defines model for JobStatus.
type JobStatus struct {
	Status string `json:"status"`
}

// JobStatusResponse defines model for JobStatusResponse.
type JobStatusResponse struct {
	JobGroupId *string `json:"job_group_id,omitempty"`
	JobId      *string `json:"job_id,omitempty"`
	Status     string  `json:"status"`
}

// LogRequest defines model for LogRequest.
type LogRequest struct {
	Message   map[string]interface{} `json:"message"`
	Source    string                 `json:"source"`
	Timestamp string                 `json:"timestamp"`
	Type      string                 `json:"type"`
}

// LogResponse defines model for LogResponse.
type LogResponse struct {
	Success *bool `json:"success,omitempty"`
}

// MakeEnvironmentRequest defines model for MakeEnvironmentRequest.
type MakeEnvironmentRequest struct {
	Alias                 *string                 `json:"alias,omitempty"`
	ArtifactId            *string                 `json:"artifact_id,omitempty"`
	Dataset               *string                 `json:"dataset,omitempty"`
	EnvConfig             *map[string]interface{} `json:"env_config,omitempty"`
	EnvId                 string                  `json:"env_id"`
	Fast                  *bool                   `json:"fast,omitempty"`
	InterfaceHeight       *int32                  `json:"interface_height,omitempty"`
	InterfaceType         string                  `json:"interface_type"`
	InterfaceWidth        *int32                  `json:"interface_width,omitempty"`
	Keepalive             *bool                   `json:"keepalive,omitempty"`
	OpenPageOnStart       *bool                   `json:"open_page_on_start,omitempty"`
	RecordActions         *bool                   `json:"record_actions,omitempty"`
	RecordNetworkRequests *bool                   `json:"record_network_requests,omitempty"`
	Source                *string                 `json:"source,omitempty"`
	Tag                   *string                 `json:"tag,omitempty"`
	Version               *string                 `json:"version,omitempty"`
}

// MakeEnvironmentResponse defines model for MakeEnvironmentResponse.
type MakeEnvironmentResponse struct {
	Alias *string `json:"alias,omitempty"`
	JobId string  `json:"job_id"`
}

// OperationEvent Server-sent event for operation monitoring. The SSE data field contains base64-encoded JSON of this object.
//
// **Event Types:**
// - `connected`: Initial connection event, no action needed, continue listening
// - `progress`: Progress update with human-readable message
// - `run_result`: Sandbox setup/creation completed (check `success` field)
// - `ssh_result`: SSH setup operation completed (check `success` field)
// - `error`: Operation failed (check `error` or `message` field)
//
// **Terminal Events:**
// `run_result`, `ssh_result`, and `error` are terminal events that indicate the operation has finished.
// Close the stream after receiving one of these.
//
// **Success Detection:**
// An operation is successful if you receive `run_result` or `ssh_result` with `success: true`.
// An operation failed if you receive an `error` event or a result event with `success: false`.
type OperationEvent struct {
	// Error Error message if operation failed
	Error *string `json:"error,omitempty"`

	// Message Human-readable progress or status message
	Message *string `json:"message,omitempty"`

	// Success Whether the operation was successful (only present in result events)
	Success *bool `json:"success,omitempty"`

	// Type Type of operation event
	Type OperationEventType `json:"type"`
}

// OperationEventType Type of operation event
type OperationEventType string

// Organization defines model for Organization.
type Organization struct {
	ApiKey string `json:"api_key"`
	Id     int32  `json:"id"`
	Name   string `json:"name"`
}

// OrganizationMember defines model for OrganizationMember.
type OrganizationMember struct {
	Email string `json:"email"`
	Id    int32  `json:"id"`
	Name  string `json:"name"`
	Role  string `json:"role"`
}

// PlatoConfig defines model for PlatoConfig.
type PlatoConfig struct {
	Datasets *map[string]SimConfigDataset `json:"datasets,omitempty"`
	Service  *string                      `json:"service,omitempty"`
}

// PlatoTask defines model for PlatoTask.
type PlatoTask struct {
	AverageSteps            *int                    `json:"average_steps,omitempty"`
	AverageTime             *float32                `json:"average_time,omitempty"`
	DatasetName             *string                 `json:"dataset_name,omitempty"`
	DefaultScoringConfig    *map[string]interface{} `json:"default_scoring_config,omitempty"`
	EnvId                   string                  `json:"env_id"`
	IsSample                *bool                   `json:"is_sample,omitempty"`
	Metadata                *PlatoTaskMetadata      `json:"metadata,omitempty"`
	Name                    string                  `json:"name"`
	NumValidatorHumanScores *int                    `json:"num_validator_human_scores,omitempty"`
	OutputSchema            *map[string]interface{} `json:"output_schema,omitempty"`
	Prompt                  string                  `json:"prompt"`
	PublicId                string                  `json:"public_id"`
	ScoringType             *[]ScoringType          `json:"scoring_type,omitempty"`
	SimulatorArtifactId     *string                 `json:"simulator_artifact_id,omitempty"`
	StartUrl                string                  `json:"start_url"`
}

// PlatoTaskMetadata defines model for PlatoTaskMetadata.
type PlatoTaskMetadata struct {
	Capabilities   *[]string                        `json:"capabilities,omitempty"`
	ReasoningLevel *PlatoTaskMetadataReasoningLevel `json:"reasoning_level,omitempty"`
	Rejected       *bool                            `json:"rejected,omitempty"`
	Skills         *[]string                        `json:"skills,omitempty"`
	Tags           *[]string                        `json:"tags,omitempty"`
}

// PlatoTaskMetadataReasoningLevel defines model for PlatoTaskMetadata.ReasoningLevel.
type PlatoTaskMetadataReasoningLevel string

// PostEvaluationResultRequest defines model for PostEvaluationResultRequest.
type PostEvaluationResultRequest struct {
	AgentVersion *string                   `json:"agent_version,omitempty"`
	Mutations    *[]map[string]interface{} `json:"mutations,omitempty"`
	Reason       *string                   `json:"reason,omitempty"`
	Success      bool                      `json:"success"`
}

// PostEvaluationResultResponse defines model for PostEvaluationResultResponse.
type PostEvaluationResultResponse struct {
	Message *string `json:"message,omitempty"`
	Success *bool   `json:"success,omitempty"`
}

// ProxyUrlResponse defines model for ProxyUrlResponse.
type ProxyUrlResponse struct {
	Data *struct {
		ProxyUrl *string `json:"proxy_url,omitempty"`
	} `json:"data,omitempty"`
	Error *string `json:"error,omitempty"`
}

// ResetEnvironmentRequest defines model for ResetEnvironmentRequest.
type ResetEnvironmentRequest struct {
	AgentVersion     *string `json:"agent_version,omitempty"`
	LoadBrowserState *bool   `json:"load_browser_state,omitempty"`
	TestCasePublicId *string `json:"test_case_public_id,omitempty"`
}

// ResetEnvironmentResponse defines model for ResetEnvironmentResponse.
type ResetEnvironmentResponse struct {
	Data *struct {
		RunSessionId *string `json:"run_session_id,omitempty"`
	} `json:"data,omitempty"`
	Error   *string `json:"error,omitempty"`
	Success bool    `json:"success"`
}

// ResetResponse defines model for ResetResponse.
type ResetResponse struct {
	Data *struct {
		RunSessionId *string `json:"run_session_id,omitempty"`
	} `json:"data,omitempty"`
	Error   *string `json:"error,omitempty"`
	Success bool    `json:"success"`
}

// RunningJobsResponse defines model for RunningJobsResponse.
type RunningJobsResponse struct {
	OrganizationId int32 `json:"organization_id"`
	RunningJobs    int32 `json:"running_jobs"`
}

// RunningSessionsCountResponse defines model for RunningSessionsCountResponse.
type RunningSessionsCountResponse struct {
	OrganizationId       *string `json:"organization_id,omitempty"`
	RunningSessionsCount *int    `json:"running_sessions_count,omitempty"`
}

// SSHInfo defines model for SSHInfo.
type SSHInfo struct {
	// CorrelationId Correlation ID for monitoring SSH setup
	CorrelationId string `json:"correlation_id"`

	// PrivateKeyPath Path to private key file
	PrivateKeyPath string `json:"private_key_path"`

	// PublicId Sandbox public ID
	PublicId string `json:"public_id"`

	// PublicKey Generated SSH public key
	PublicKey string `json:"public_key"`

	// SshCommand Complete SSH command to connect
	SshCommand string `json:"ssh_command"`

	// SshConfigPath Path to SSH config file
	SshConfigPath string `json:"ssh_config_path"`

	// SshHost SSH host identifier
	SshHost string `json:"ssh_host"`
}

// Sandbox defines model for Sandbox.
type Sandbox struct {
	CorrelationId *string `json:"correlation_id,omitempty"`
	JobGroupId    string  `json:"job_group_id"`
	JobId         string  `json:"job_id"`
	PublicId      string  `json:"public_id"`
	Status        *string `json:"status,omitempty"`
	Url           *string `json:"url,omitempty"`
}

// ScoringType defines model for ScoringType.
type ScoringType string

// SessionSummary defines model for SessionSummary.
type SessionSummary struct {
	LastNHours       int32 `json:"last_n_hours"`
	OrganizationId   int32 `json:"organization_id"`
	PeakRunningCount int32 `json:"peak_running_count"`
	PendingSessions  int32 `json:"pending_sessions"`
	RunningSessions  int32 `json:"running_sessions"`
}

// SetupRootAccessRequest defines model for SetupRootAccessRequest.
type SetupRootAccessRequest struct {
	// SshPublicKey SSH public key to install for root user
	SshPublicKey string `json:"ssh_public_key"`

	// Timeout Timeout in seconds
	Timeout *int32 `json:"timeout,omitempty"`
}

// SetupRootAccessResponse defines model for SetupRootAccessResponse.
type SetupRootAccessResponse struct {
	// CorrelationId Correlation ID for monitoring setup progress via SSE
	CorrelationId *string `json:"correlation_id,omitempty"`
	Success       *bool   `json:"success,omitempty"`
}

// SetupSandboxRequest defines model for SetupSandboxRequest.
type SetupSandboxRequest struct {
	// Dataset Dataset name
	Dataset            string           `json:"dataset"`
	PlatoDatasetConfig SimConfigDataset `json:"plato_dataset_config"`

	// SshPublicKey SSH public key to install for plato user
	SshPublicKey *string `json:"ssh_public_key,omitempty"`
}

// SetupSandboxResponse defines model for SetupSandboxResponse.
type SetupSandboxResponse struct {
	// CorrelationId Correlation ID for monitoring setup progress via SSE
	CorrelationId string `json:"correlation_id"`
}

// SimConfigCompute defines model for SimConfigCompute.
type SimConfigCompute struct {
	AppPort            int32 `json:"app_port"`
	Cpus               int32 `json:"cpus"`
	Disk               int32 `json:"disk"`
	Memory             int32 `json:"memory"`
	PlatoMessagingPort int32 `json:"plato_messaging_port"`
}

// SimConfigDataset defines model for SimConfigDataset.
type SimConfigDataset struct {
	Compute   SimConfigCompute              `json:"compute"`
	Listeners *map[string]SimConfigListener `json:"listeners,omitempty"`
	Metadata  SimConfigMetadata             `json:"metadata"`
	Services  *map[string]SimConfigService  `json:"services,omitempty"`
}

// SimConfigListener defines model for SimConfigListener.
type SimConfigListener struct {
	DbDatabase     *string               `json:"db_database,omitempty"`
	DbHost         *string               `json:"db_host,omitempty"`
	DbPassword     *string               `json:"db_password,omitempty"`
	DbPort         *int32                `json:"db_port,omitempty"`
	DbType         *string               `json:"db_type,omitempty"`
	DbUser         *string               `json:"db_user,omitempty"`
	IgnorePatterns *[]string             `json:"ignore_patterns,omitempty"`
	SeedDataPath   *string               `json:"seed_data_path,omitempty"`
	SeedDataPaths  *[]string             `json:"seed_data_paths,omitempty"`
	TargetDir      *string               `json:"target_dir,omitempty"`
	Type           SimConfigListenerType `json:"type"`
	Volumes        *[]string             `json:"volumes,omitempty"`
	WatchEnabled   *bool                 `json:"watch_enabled,omitempty"`
	WatchPatterns  *[]string             `json:"watch_patterns,omitempty"`
}

// SimConfigListenerType defines model for SimConfigListener.Type.
type SimConfigListenerType string

// SimConfigMetadata defines model for SimConfigMetadata.
type SimConfigMetadata struct {
	Description   *string     `json:"description,omitempty"`
	Favicon       *string     `json:"favicon,omitempty"`
	FlowsPath     *string     `json:"flows_path,omitempty"`
	License       *string     `json:"license,omitempty"`
	Name          string      `json:"name"`
	SourceCodeUrl *string     `json:"source_code_url,omitempty"`
	StartUrl      *string     `json:"start_url,omitempty"`
	Variables     *[]Variable `json:"variables,omitempty"`
}

// SimConfigService defines model for SimConfigService.
type SimConfigService struct {
	File                      *string   `json:"file,omitempty"`
	HealthyWaitTimeout        *int32    `json:"healthy_wait_timeout,omitempty"`
	RequiredHealthyContainers *[]string `json:"required_healthy_containers,omitempty"`
	Type                      string    `json:"type"`
}

// Simulator defines model for Simulator.
type Simulator struct {
	Config      *map[string]interface{} `json:"config,omitempty"`
	Description *string                 `json:"description,omitempty"`
	Enabled     bool                    `json:"enabled"`
	Id          *int                    `json:"id,omitempty"`
	Name        string                  `json:"name"`
	SimType     *string                 `json:"sim_type,omitempty"`
}

// SimulatorListItem defines model for SimulatorListItem.
type SimulatorListItem struct {
	ArtifactId  *string `json:"artifact_id,omitempty"`
	Description *string `json:"description,omitempty"`
	Name        string  `json:"name"`
}

// SimulatorVersion defines model for SimulatorVersion.
type SimulatorVersion struct {
	ArtifactId string `json:"artifact_id"`
	CreatedAt  string `json:"created_at"`
	Dataset    string `json:"dataset"`
	Version    string `json:"version"`
}

// StartWorkerRequest defines model for StartWorkerRequest.
type StartWorkerRequest struct {
	Dataset            string           `json:"dataset"`
	PlatoDatasetConfig SimConfigDataset `json:"plato_dataset_config"`
	Service            *string          `json:"service,omitempty"`
	Timeout            *int32           `json:"timeout,omitempty"`
}

// StartWorkerResponse defines model for StartWorkerResponse.
type StartWorkerResponse struct {
	CorrelationId string `json:"correlation_id"`
	Status        string `json:"status"`
	Timestamp     string `json:"timestamp"`
}

// TaskMetadata defines model for TaskMetadata.
type TaskMetadata struct {
	Capabilities   *[]string                   `json:"capabilities,omitempty"`
	ReasoningLevel *TaskMetadataReasoningLevel `json:"reasoningLevel,omitempty"`
	Rejected       *bool                       `json:"rejected,omitempty"`
	Skills         *[]string                   `json:"skills,omitempty"`
	Tags           *[]string                   `json:"tags,omitempty"`
}

// TaskMetadataReasoningLevel defines model for TaskMetadata.ReasoningLevel.
type TaskMetadataReasoningLevel string

// TestCase defines model for TestCase.
type TestCase struct {
	AverageStepsTaken    *int     `json:"averageStepsTaken,omitempty"`
	AverageTimeTaken     *float32 `json:"averageTimeTaken,omitempty"`
	DefaultScoringConfig *struct {
		NumSessionsUsed *int `json:"num_sessions_used,omitempty"`
	} `json:"defaultScoringConfig,omitempty"`
	IsSample       *bool                   `json:"isSample,omitempty"`
	MetadataConfig *TaskMetadata           `json:"metadataConfig,omitempty"`
	Name           string                  `json:"name"`
	OutputSchema   *map[string]interface{} `json:"outputSchema,omitempty"`
	Prompt         string                  `json:"prompt"`
	PublicId       string                  `json:"publicId"`
	ScoringTypes   *[]TestCaseScoringTypes `json:"scoringTypes,omitempty"`
	Simulator      struct {
		Id   *int    `json:"id,omitempty"`
		Name *string `json:"name,omitempty"`
	} `json:"simulator"`
	SimulatorArtifactId *string `json:"simulatorArtifactId,omitempty"`
	StartUrl            string  `json:"startUrl"`
}

// TestCaseScoringTypes defines model for TestCase.ScoringTypes.
type TestCaseScoringTypes string

// TestCasesResponse defines model for TestCasesResponse.
type TestCasesResponse struct {
	Page      *int       `json:"page,omitempty"`
	PageSize  *int       `json:"page_size,omitempty"`
	Testcases []TestCase `json:"testcases"`
	Total     *int       `json:"total,omitempty"`
}

// Variable defines model for Variable.
type Variable struct {
	Name  string `json:"name"`
	Value string `json:"value"`
}

// WorkerReadyResponse defines model for WorkerReadyResponse.
type WorkerReadyResponse struct {
	Error        *string                 `json:"error,omitempty"`
	HealthStatus *map[string]interface{} `json:"health_status,omitempty"`
	Ready        bool                    `json:"ready"`
	WorkerIp     *string                 `json:"worker_ip,omitempty"`
	WorkerPort   *int                    `json:"worker_port,omitempty"`
}

// WorkerStatus defines model for WorkerStatus.
type WorkerStatus struct {
	Error *string `json:"error,omitempty"`
	Ready bool    `json:"ready"`
}

// GetEnvironmentStateParams defines parameters for GetEnvironmentState.
type GetEnvironmentStateParams struct {
	MergeMutations *bool `form:"merge_mutations,omitempty" json:"merge_mutations,omitempty"`
}

// GetTestCasesParams defines parameters for GetTestCases.
type GetTestCasesParams struct {
	SimulatorName *string `form:"simulator_name,omitempty" json:"simulator_name,omitempty"`
	SimulatorId   *string `form:"simulator_id,omitempty" json:"simulator_id,omitempty"`
	PageSize      *int    `form:"page_size,omitempty" json:"page_size,omitempty"`
}

// MakeEnvironmentJSONRequestBody defines body for MakeEnvironment for application/json ContentType.
type MakeEnvironmentJSONRequestBody = MakeEnvironmentRequest

// EvaluateSessionJSONRequestBody defines body for EvaluateSession for application/json ContentType.
type EvaluateSessionJSONRequestBody = EvaluateRequest

// PostEvaluationResultJSONRequestBody defines body for PostEvaluationResult for application/json ContentType.
type PostEvaluationResultJSONRequestBody = PostEvaluationResultRequest

// ResetEnvironmentJSONRequestBody defines body for ResetEnvironment for application/json ContentType.
type ResetEnvironmentJSONRequestBody = ResetEnvironmentRequest

// LogMessageJSONRequestBody defines body for LogMessage for application/json ContentType.
type LogMessageJSONRequestBody = LogRequest

// CreateSandboxJSONRequestBody defines body for CreateSandbox for application/json ContentType.
type CreateSandboxJSONRequestBody = CreateSandboxRequest

// SetupSandboxJSONRequestBody defines body for SetupSandbox for application/json ContentType.
type SetupSandboxJSONRequestBody = SetupSandboxRequest

// SetupRootAccessJSONRequestBody defines body for SetupRootAccess for application/json ContentType.
type SetupRootAccessJSONRequestBody = SetupRootAccessRequest

// CreateSnapshotJSONRequestBody defines body for CreateSnapshot for application/json ContentType.
type CreateSnapshotJSONRequestBody = CreateSnapshotRequest

// StartWorkerJSONRequestBody defines body for StartWorker for application/json ContentType.
type StartWorkerJSONRequestBody = StartWorkerRequest
