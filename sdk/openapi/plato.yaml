openapi: 3.0.0
info:
  title: Plato API
  version: 1.0.0
  description: API for Plato platform

paths:
  /env/make2:
    post:
      summary: Create a new environment
      operationId: makeEnvironment
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/MakeEnvironmentRequest'
      responses:
        '200':
          description: Environment created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MakeEnvironmentResponse'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /env/{job_id}/status:
    get:
      summary: Get job status
      operationId: getJobStatus
      parameters:
        - name: job_id
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Job status retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/JobStatusResponse'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /env/{job_id}/cdp_url:
    get:
      summary: Get Chrome DevTools Protocol URL
      operationId: getCdpUrl
      parameters:
        - name: job_id
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: CDP URL retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CdpUrlResponse'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /env/{job_id}/proxy_url:
    get:
      summary: Get proxy URL
      operationId: getProxyUrl
      parameters:
        - name: job_id
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Proxy URL retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProxyUrlResponse'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /env/{job_id}/close:
    post:
      summary: Close an environment
      operationId: closeEnvironment
      parameters:
        - name: job_id
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Environment closed successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CloseEnvironmentResponse'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /env/{job_id}/backup:
    post:
      summary: Backup an environment
      operationId: backupEnvironment
      parameters:
        - name: job_id
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Environment backed up successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BackupEnvironmentResponse'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /env/{job_id}/reset:
    post:
      summary: Reset an environment
      operationId: resetEnvironment
      parameters:
        - name: job_id
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: false
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ResetEnvironmentRequest'
      responses:
        '200':
          description: Environment reset successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResetEnvironmentResponse'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /env/{job_id}/state:
    get:
      summary: Get environment state
      operationId: getEnvironmentState
      parameters:
        - name: job_id
          in: path
          required: true
          schema:
            type: string
        - name: merge_mutations
          in: query
          required: false
          schema:
            type: boolean
            default: false
      responses:
        '200':
          description: Environment state retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EnvironmentStateResponse'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /env/{job_id}/worker_ready:
    get:
      summary: Check if worker is ready
      operationId: getWorkerReady
      parameters:
        - name: job_id
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Worker ready status retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/WorkerReadyResponse'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /env/{job_id}/heartbeat:
    post:
      summary: Send heartbeat
      operationId: sendHeartbeat
      parameters:
        - name: job_id
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Heartbeat sent successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HeartbeatResponse'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /env/{job_id}/active_session:
    get:
      summary: Get active session
      operationId: getActiveSession
      parameters:
        - name: job_id
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Active session retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ActiveSessionResponse'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /env/session/{session_id}/evaluate:
    post:
      summary: Evaluate a session
      operationId: evaluateSession
      parameters:
        - name: session_id
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: false
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/EvaluateRequest'
      responses:
        '200':
          description: Evaluation completed successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EvaluateResponse'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /env/session/{session_id}/score:
    post:
      summary: Post evaluation result
      operationId: postEvaluationResult
      parameters:
        - name: session_id
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PostEvaluationResultRequest'
      responses:
        '200':
          description: Evaluation result posted successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PostEvaluationResultResponse'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /env/{session_id}/log:
    post:
      summary: Log a message
      operationId: logMessage
      parameters:
        - name: session_id
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LogRequest'
      responses:
        '200':
          description: Log message sent successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LogResponse'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /env/simulators:
    get:
      summary: List all simulators
      operationId: listSimulators
      responses:
        '200':
          description: Simulators retrieved successfully
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Simulator'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /testcases:
    get:
      summary: Get test cases
      operationId: getTestCases
      parameters:
        - name: simulator_name
          in: query
          required: false
          schema:
            type: string
        - name: simulator_id
          in: query
          required: false
          schema:
            type: string
        - name: page_size
          in: query
          required: false
          schema:
            type: integer
            default: 100
      responses:
        '200':
          description: Test cases retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TestCasesResponse'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /user/organization/running-sessions:
    get:
      summary: Get running sessions count
      operationId: getRunningSessionsCount
      responses:
        '200':
          description: Running sessions count retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RunningSessionsCountResponse'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /public-build/events/{correlation_id}:
    get:
      summary: Monitor operation progress via Server-Sent Events
      operationId: monitorOperation
      description: |
        Monitor the progress of long-running operations (sandbox creation, setup, etc.) via SSE.
        
        **Event Flow:**
        1. First event: `type: "connected"` - Connection established, continue listening
        2. Progress events: `type: "progress"` with `message` field - Operation updates
        3. Completion: `type: "run_result"` or `"ssh_result"` - Operation finished
           - Check `success: true` for successful completion
           - Check `error` or `message` field if `success: false`
        4. Error: `type: "error"` - Operation failed, check `error` or `message` field
        
        **Data Format:**
        SSE data is base64-encoded JSON. Decode it to get the OperationEvent object.
        
        **Client Implementation Required:**
        - Decode base64 data from each SSE event
        - Parse JSON to OperationEvent
        - Check event.type and event.success to determine operation status
        - Continue listening until receiving a terminal event (run_result, ssh_result, or error)
        - Return success/error based on the terminal event
        
        **Example (pseudo-code):**
        ```
        for event in stream:
          decoded = base64_decode(event.data)
          operation_event = json_parse(decoded)
          
          if operation_event.type == "connected":
            continue  # Keep listening
          elif operation_event.type in ["run_result", "ssh_result"]:
            if operation_event.success:
              return SUCCESS
            else:
              return ERROR(operation_event.error || operation_event.message)
          elif operation_event.type == "error":
            return ERROR(operation_event.error || operation_event.message)
        ```
      x-fern-streaming:
        format: sse
      parameters:
        - name: correlation_id
          in: path
          required: true
          schema:
            type: string
          description: Correlation ID from sandbox creation or setup operation
      responses:
        '200':
          description: SSE stream of operation events
          content:
            text/event-stream:
              schema:
                $ref: '#/components/schemas/OperationEvent'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /public-build/vm/create:
    post:
      summary: Create a new VM sandbox
      operationId: createSandbox
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateSandboxRequest'
      responses:
        '200':
          description: Sandbox creation initiated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreateSandboxResponse'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /public-build/vm/{job_id}/setup-sandbox:
    post:
      summary: Setup sandbox with dataset configuration and optional SSH key
      operationId: setupSandbox
      parameters:
        - name: job_id
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SetupSandboxRequest'
      responses:
        '200':
          description: Sandbox setup initiated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SetupSandboxResponse'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /public-build/vm/{public_id}:
    delete:
      summary: Delete a VM sandbox
      operationId: deleteSandbox
      parameters:
        - name: public_id
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Sandbox deleted successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DeleteSandboxResponse'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /public-build/vm/{public_id}/snapshot:
    post:
      summary: Create a snapshot of a VM
      operationId: createSnapshot
      parameters:
        - name: public_id
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateSnapshotRequest'
      responses:
        '200':
          description: Snapshot created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreateSnapshotResponse'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /public-build/vm/{public_id}/start-worker:
    post:
      summary: Start Plato worker on a VM
      operationId: startWorker
      parameters:
        - name: public_id
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/StartWorkerRequest'
      responses:
        '200':
          description: Worker started successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StartWorkerResponse'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /public-build/vm/{public_id}/setup-root-access:
    post:
      summary: Setup root SSH access with public key
      operationId: setupRootAccess
      parameters:
        - name: public_id
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SetupRootAccessRequest'
      responses:
        '200':
          description: Root access setup successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SetupRootAccessResponse'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

components:
  schemas:
    SimConfigCompute:
      type: object
      required:
        - cpus
        - memory
        - disk
        - app_port
        - plato_messaging_port
      properties:
        cpus:
          type: integer
          format: int32
        memory:
          type: integer
          format: int32
        disk:
          type: integer
          format: int32
        app_port:
          type: integer
          format: int32
        plato_messaging_port:
          type: integer
          format: int32

    Variable:
      type: object
      required:
        - name
        - value
      properties:
        name:
          type: string
        value:
          type: string

    SimConfigMetadata:
      type: object
      required:
        - name
      properties:
        favicon:
          type: string
        name:
          type: string
        description:
          type: string
        source_code_url:
          type: string
        start_url:
          type: string
        license:
          type: string
        variables:
          type: array
          items:
            $ref: '#/components/schemas/Variable'
        flows_path:
          type: string

    SimConfigService:
      type: object
      required:
        - type
      properties:
        type:
          type: string
        file:
          type: string
        required_healthy_containers:
          type: array
          items:
            type: string
        healthy_wait_timeout:
          type: integer
          format: int32

    SimConfigListener:
      type: object
      required:
        - type
      properties:
        type:
          type: string
          enum: [db, file, proxy]
        # DB listener fields
        db_type:
          type: string
        db_host:
          type: string
        db_port:
          type: integer
          format: int32
        db_user:
          type: string
        db_password:
          type: string
        db_database:
          type: string
        # File listener fields
        target_dir:
          type: string
        watch_enabled:
          type: boolean
        watch_patterns:
          type: array
          items:
            type: string
        ignore_patterns:
          type: array
          items:
            type: string
        seed_data_path:
          type: string
        # Common fields
        seed_data_paths:
          type: array
          items:
            type: string
        volumes:
          type: array
          items:
            type: string

    SimConfigDataset:
      type: object
      required:
        - compute
        - metadata
      properties:
        compute:
          $ref: '#/components/schemas/SimConfigCompute'
        metadata:
          $ref: '#/components/schemas/SimConfigMetadata'
        services:
          type: object
          additionalProperties:
            $ref: '#/components/schemas/SimConfigService'
        listeners:
          type: object
          additionalProperties:
            $ref: '#/components/schemas/SimConfigListener'

    PlatoConfig:
      type: object
      properties:
        service:
          type: string
        datasets:
          type: object
          additionalProperties:
            $ref: '#/components/schemas/SimConfigDataset'

    Sandbox:
      type: object
      required:
        - job_id
        - public_id
        - job_group_id
      properties:
        job_id:
          type: string
        public_id:
          type: string
        job_group_id:
          type: string
        url:
          type: string
        status:
          type: string
        correlation_id:
          type: string

    Environment:
      type: object
      required:
        - job_id
      properties:
        job_id:
          type: string
        alias:
          type: string
        status:
          type: string

    SimulatorListItem:
      type: object
      required:
        - name
      properties:
        name:
          type: string
        description:
          type: string
        artifact_id:
          type: string

    CreateSnapshotRequest:
      type: object
      properties:
        service:
          type: string
        git_hash:
          type: string
        dataset:
          type: string

    CreateSnapshotResponse:
      type: object
      required:
        - artifact_id
        - status
        - timestamp
        - correlation_id
        - s3_uri
      properties:
        artifact_id:
          type: string
        status:
          type: string
        timestamp:
          type: string
        correlation_id:
          type: string
        s3_uri:
          type: string
        git_hash:
          type: string

    StartWorkerRequest:
      type: object
      required:
        - dataset
        - plato_dataset_config
      properties:
        service:
          type: string
        dataset:
          type: string
        plato_dataset_config:
          $ref: '#/components/schemas/SimConfigDataset'
        timeout:
          type: integer
          format: int32

    StartWorkerResponse:
      type: object
      required:
        - status
        - timestamp
        - correlation_id
      properties:
        status:
          type: string
        timestamp:
          type: string
        correlation_id:
          type: string

    ErrorResponse:
      type: object
      properties:
        error:
          type: string
        message:
          type: string

    MakeEnvironmentRequest:
      type: object
      required:
        - env_id
        - interface_type
      properties:
        interface_type:
          type: string
        interface_width:
          type: integer
          format: int32
        interface_height:
          type: integer
          format: int32
        source:
          type: string
        open_page_on_start:
          type: boolean
        env_id:
          type: string
        tag:
          type: string
        dataset:
          type: string
        artifact_id:
          type: string
        env_config:
          type: object
          additionalProperties: true
        record_network_requests:
          type: boolean
        record_actions:
          type: boolean
        keepalive:
          type: boolean
        alias:
          type: string
        fast:
          type: boolean
        version:
          type: string

    MakeEnvironmentResponse:
      type: object
      required:
        - job_id
      properties:
        job_id:
          type: string
        alias:
          type: string

    JobStatusResponse:
      type: object
      required:
        - status
      properties:
        status:
          type: string
        job_id:
          type: string
        job_group_id:
          type: string

    CdpUrlResponse:
      type: object
      properties:
        data:
          type: object
          properties:
            cdp_url:
              type: string
        error:
          type: string

    ProxyUrlResponse:
      type: object
      properties:
        data:
          type: object
          properties:
            proxy_url:
              type: string
        error:
          type: string

    CloseEnvironmentResponse:
      type: object
      properties:
        success:
          type: boolean
        message:
          type: string

    BackupEnvironmentResponse:
      type: object
      properties:
        success:
          type: boolean
        message:
          type: string
        data:
          type: object

    ResetEnvironmentRequest:
      type: object
      properties:
        test_case_public_id:
          type: string
        agent_version:
          type: string
        load_browser_state:
          type: boolean

    ResetEnvironmentResponse:
      type: object
      required:
        - success
      properties:
        success:
          type: boolean
        error:
          type: string
        data:
          type: object
          properties:
            run_session_id:
              type: string

    EnvironmentStateResponse:
      type: object
      properties:
        data:
          type: object
          properties:
            state:
              type: object
              additionalProperties: true

    WorkerReadyResponse:
      type: object
      required:
        - ready
      properties:
        ready:
          type: boolean
        worker_ip:
          type: string
        worker_port:
          type: integer
        health_status:
          type: object
        error:
          type: string

    HeartbeatResponse:
      type: object
      properties:
        success:
          type: boolean
        timestamp:
          type: string

    ActiveSessionResponse:
      type: object
      properties:
        session_id:
          type: string
        error:
          type: string

    EvaluateRequest:
      type: object
      properties:
        value:
          type: object
          additionalProperties: true

    EvaluateResponse:
      type: object
      properties:
        score:
          type: object
          properties:
            result:
              type: object
              properties:
                correct:
                  type: boolean
                reason:
                  type: string
                diffs:
                  type: array
                  items:
                    type: object
                expected_mutations:
                  type: array
                  items:
                    type: object
                mutations:
                  type: array
                  items:
                    type: object

    PostEvaluationResultRequest:
      type: object
      required:
        - success
      properties:
        success:
          type: boolean
        reason:
          type: string
        agent_version:
          type: string
        mutations:
          type: array
          items:
            type: object

    PostEvaluationResultResponse:
      type: object
      properties:
        success:
          type: boolean
        message:
          type: string

    LogRequest:
      type: object
      required:
        - source
        - type
        - message
        - timestamp
      properties:
        source:
          type: string
        type:
          type: string
        message:
          type: object
          additionalProperties: true
        timestamp:
          type: string

    LogResponse:
      type: object
      properties:
        success:
          type: boolean

    Simulator:
      type: object
      required:
        - name
        - enabled
      properties:
        id:
          type: integer
        name:
          type: string
        description:
          type: string
        enabled:
          type: boolean
        sim_type:
          type: string
        config:
          type: object

    TestCasesResponse:
      type: object
      required:
        - testcases
      properties:
        testcases:
          type: array
          items:
            $ref: '#/components/schemas/TestCase'
        total:
          type: integer
        page:
          type: integer
        page_size:
          type: integer

    TestCase:
      type: object
      required:
        - publicId
        - name
        - prompt
        - startUrl
        - simulator
      properties:
        publicId:
          type: string
        name:
          type: string
        prompt:
          type: string
        startUrl:
          type: string
        simulator:
          type: object
          properties:
            name:
              type: string
            id:
              type: integer
        averageTimeTaken:
          type: number
          format: float
        averageStepsTaken:
          type: integer
        defaultScoringConfig:
          type: object
          properties:
            num_sessions_used:
              type: integer
        scoringTypes:
          type: array
          items:
            type: string
            enum: [output, mutations]
        outputSchema:
          type: object
          additionalProperties: true
        isSample:
          type: boolean
        simulatorArtifactId:
          type: string
        metadataConfig:
          $ref: '#/components/schemas/TaskMetadata'

    TaskMetadata:
      type: object
      properties:
        reasoningLevel:
          type: string
          enum: [level_1, level_2, level_3, level_4, level_5]
        skills:
          type: array
          items:
            type: string
        capabilities:
          type: array
          items:
            type: string
        tags:
          type: array
          items:
            type: string
        rejected:
          type: boolean

    RunningSessionsCountResponse:
      type: object
      properties:
        organization_id:
          type: string
        running_sessions_count:
          type: integer

    EvaluationResult:
      type: object
      required:
        - success
      properties:
        success:
          type: boolean
        reason:
          type: string
        diffs:
          type: array
          items:
            type: object
        expected_mutations:
          type: array
          items:
            type: object
        actual_mutations:
          type: array
          items:
            type: object

    ScoringType:
      type: string
      enum:
        - output
        - mutations

    PlatoTask:
      type: object
      required:
        - public_id
        - name
        - prompt
        - env_id
        - start_url
      properties:
        public_id:
          type: string
        name:
          type: string
        prompt:
          type: string
        env_id:
          type: string
        start_url:
          type: string
        dataset_name:
          type: string
        average_time:
          type: number
          format: float
        average_steps:
          type: integer
        num_validator_human_scores:
          type: integer
        default_scoring_config:
          type: object
          additionalProperties: true
        scoring_type:
          type: array
          items:
            $ref: '#/components/schemas/ScoringType'
        output_schema:
          type: object
          additionalProperties: true
        is_sample:
          type: boolean
        simulator_artifact_id:
          type: string
        metadata:
          $ref: '#/components/schemas/PlatoTaskMetadata'

    PlatoTaskMetadata:
      type: object
      properties:
        reasoning_level:
          type: string
          enum: [level_1, level_2, level_3, level_4, level_5]
        skills:
          type: array
          items:
            type: string
        capabilities:
          type: array
          items:
            type: string
        tags:
          type: array
          items:
            type: string
        rejected:
          type: boolean

    OperationEvent:
      type: object
      description: |
        Server-sent event for operation monitoring. The SSE data field contains base64-encoded JSON of this object.
        
        **Event Types:**
        - `connected`: Initial connection event, no action needed, continue listening
        - `progress`: Progress update with human-readable message
        - `run_result`: Sandbox setup/creation completed (check `success` field)
        - `ssh_result`: SSH setup operation completed (check `success` field)
        - `error`: Operation failed (check `error` or `message` field)
        
        **Terminal Events:**
        `run_result`, `ssh_result`, and `error` are terminal events that indicate the operation has finished.
        Close the stream after receiving one of these.
        
        **Success Detection:**
        An operation is successful if you receive `run_result` or `ssh_result` with `success: true`.
        An operation failed if you receive an `error` event or a result event with `success: false`.
      required:
        - type
      properties:
        type:
          type: string
          enum: [connected, run_result, ssh_result, error, progress]
          description: Type of operation event
        success:
          type: boolean
          description: Whether the operation was successful (only present in result events)
        error:
          type: string
          description: Error message if operation failed
        message:
          type: string
          description: Human-readable progress or status message
      example:
        type: run_result
        success: true
        message: "Sandbox setup completed successfully"

    CreateSandboxRequest:
      type: object
      required:
        - dataset
        - plato_dataset_config
      properties:
        dataset:
          type: string
          description: Dataset name (e.g., "base")
        plato_dataset_config:
          $ref: '#/components/schemas/SimConfigDataset'
        timeout:
          type: integer
          format: int32
          description: Timeout in seconds for sandbox creation
          default: 1200
        wait_time:
          type: integer
          format: int32
          description: Wait time in seconds
          default: 600
        alias:
          type: string
          description: Human-readable alias for the sandbox
        artifact_id:
          type: string
          description: Optional artifact ID to create sandbox from snapshot
        service:
          type: string
          description: Service name

    CreateSandboxResponse:
      type: object
      required:
        - job_public_id
        - job_group_id
      properties:
        url:
          type: string
          description: Public URL for the sandbox
        job_public_id:
          type: string
          description: Public ID of the sandbox job
        job_group_id:
          type: string
          description: Job group ID for the sandbox
        status:
          type: string
          description: Current status of the sandbox
        correlation_id:
          type: string
          description: Correlation ID for monitoring operation progress via SSE

    SetupSandboxRequest:
      type: object
      required:
        - dataset
        - plato_dataset_config
      properties:
        dataset:
          type: string
          description: Dataset name
        plato_dataset_config:
          $ref: '#/components/schemas/SimConfigDataset'
        ssh_public_key:
          type: string
          description: SSH public key to install for plato user

    SetupSandboxResponse:
      type: object
      required:
        - correlation_id
      properties:
        correlation_id:
          type: string
          description: Correlation ID for monitoring setup progress via SSE

    DeleteSandboxResponse:
      type: object
      properties:
        success:
          type: boolean
        message:
          type: string

    SetupRootAccessRequest:
      type: object
      required:
        - ssh_public_key
      properties:
        ssh_public_key:
          type: string
          description: SSH public key to install for root user
        timeout:
          type: integer
          format: int32
          default: 60
          description: Timeout in seconds

    SetupRootAccessResponse:
      type: object
      properties:
        success:
          type: boolean
        correlation_id:
          type: string
          description: Correlation ID for monitoring setup progress via SSE

    SSHInfo:
      type: object
      required:
        - ssh_command
        - ssh_host
        - ssh_config_path
        - public_id
      properties:
        ssh_command:
          type: string
          description: Complete SSH command to connect
        ssh_host:
          type: string
          description: SSH host identifier
        ssh_config_path:
          type: string
          description: Path to SSH config file
        public_id:
          type: string
          description: Sandbox public ID
        public_key:
          type: string
          description: Generated SSH public key
        private_key_path:
          type: string
          description: Path to private key file
        correlation_id:
          type: string
          description: Correlation ID for monitoring SSH setup
